INSTALL for Sequencer64 v. 0.9.10
Chris Ahlstrom
2015-09-10 to 2016-04-13

The current packaging for Sequencer64 is primarily aimed at developers.
There is currently no configure script... it must be bootstrapped.

Steps:

   0.  Preload any DEPENDENCIES, as listed at the end of this document.
       However, if some are missing, the configure script will tell you,
       or, at worst, a build error will tell you.

   1.  Check-out the branch you want.  Make a branch if you want to make
       changes.  The current branches are "master" and "fixups".  The latter
       is where we do most of our tentative changes, and it can be way ahead
       of "master" in number of commits.

   2. From the top project directory, run the commands:

      $ ./bootstrap
      $ ./configure

      If you do not want to see a lot of output, the stock autotools
      option "--enable-silent-rules" can be added to the ./configure command.

      For debugging without libtool getting in the way, just run the
      following command, which will add the --enable-debug and
      --disable-shared options to a configure run:

      $ ./bootstrap --enable-debug
      $ ./bootstrap -ed

      For building in release mode without seeing a ton of compiler output,
      the following command will configure for the "silent rules" of Automake:

      $ ./bootstrap --enable-release
      $ ./bootstrap -er

      If desired, there are also configure options as described below,
      and also conditional macros in the code.  The configure options can be 
      supplied to the ./configure command, while the macros can be defined
      (in the code) to even further tailor the build.

   3. Run the make command:

      $ make

      If you do not care about the documentation and debian packaging,
      change to the various sub-project directories before running make.
      
      Do not forget that you can add options to "make", such as "V=0" (enable
      silent build), "V=1" (enable the normal verbose build), and "-j n" (use
      n processors to speed up the build).

   4. To install, become root and run:

      # make install

      Note that we have removed the developer reference manual from the
      automated build (see the Doxygen DEPENDENCIES below), but the existig
      documents will still be installed.

   5. See the additional features that can be enabled, below, using 
      build macros.

   6. Also grab the Sequencer64 User Manual from:

        http://github.com/ahlstromcj/sequencer64-doc.git

      It contains a prebuilt PDF version of the manual, as well as the
      LaTeX files needed to rebuild it.

CONFIGURE OPTIONS FOR APPLICATION FEATURES:

    These options undefine the following build macros:

        SEQ64_HIGHLIGHT_EMPTY_SEQS
        SEQ64_LASH_SUPPORT
        SEQ64_JACK_SUPPORT
        SEQ64_JACK_SESSION
        SEQ64_PAUSE_SUPPORT

    --disable-highlight

        Undefines the SEQ64_HIGHLIGHT_EMPTY_SEQS  macro, which is
        otherwise defined by default.  If defined, the application will
        highlight empty sequences/patterns by coloring them yellow.

    --disable-lash

        Undefines the SEQ64_LASH_SUPPORT macro, which is otherwise defined
        by default.

    --disable-jack
    
        Undefines the SEQ64_JACK_SUPPORT macro, which is otherwise defined
        by default.

    --disable-jack-session

        Undefines the SEQ64_JACK_SESSION macro, which is defined if JACK
        support is defined, and the jack/session.h file is found.

    --disable-pause

        Undefines the SEQ64_PAUSE_SUPPORT macro.  If this macro is defined,
        then the application is built with support for a Pause button and
        for pause functionality.  This means that, in ALSA mode, the progress
        bars stay in place when Pause is activated (by click or keystroke),
        and playback resumes where it left off.  The Stop button still rewinds
        to the beginning.  The behavior of JACK transport, if enabled, is
        (should be!) unchanged.  To go back to the legacy stop/play behavior,
        use the --disable-pause option when running the configure script.
        Note that we are still working through issues with the pause option,
        and there are a lot of situations to test.

MANUALLY-DEFINED MACROS IN CODE:

    The following items are not yet part of the configure script, but can
    be edited manually to achieve the desired settings.  Only crazy or
    experiment-happy people will normally want to change the define-state of
    these macros.

    SEQ64_HANDLE_TIMESIG_AND_TEMPO:

        Provides a new option to save the Time Signature and Tempo data
        that may be present in a MIDI file (in the first track) in the
        sequence object, and write them back to the MIDI file when saved
        again, in Sequencer64 format.  The SeqSpec events that Seq24 and
        Sequencer64 save for these "events" are not readable by other MIDI
        applications, such as QTractor.  By enabling this macro, other
        sequencers can read the correct time-signature and tempo values from
        Sequencer64 MIDI files.

    SEQ64_USE_NEW_FONT:

        OBSOLETE:  now an option that can be changed in the user-settings
        ("user") configuration file.

        Already defined in the font module.  If defined, a new, anti-aliased,
        bold font is used in the user-interface.  This new font is implemented
        in new XPM files in resources/pixmaps directory: wen*.xpm.  The font
        is slightly larger, but changes the user-interface sizes only to an
        infinitesmal degree.  Using this new font is the default.

    SEQ64_USE_EVENT_MAP:

        Already defined in the event_list module.  It enables the usage of an
        std::multimap, instead of an std::list, to store MIDI events.  Because
        the code does a lot of sorting of events, using the std::multimap is
        actually a lot faster (especially under debug mode, where it takes
        many seconds for a medium-size MIDI file to load using the std::list
        implementation).

        There is still a chance that the std::multimap might prove the
        limiting factor during playback.  If that is the case, then we would
        probably implement dumping the multimap to a vector before playback.
        We shall see!

    SEQ64_USE_MIDI_VECTOR:

        Defined and used in the midifile module.  It provides the preferred
        alternative to the list for storing and counting the bytes of MIDI
        data.  It is an attempt to stop reversing certain events due to the
        peculiarities of using std::list to store MIDI bytes from a sequence.
        This new implementation uses std::vector and does not use pop_back()
        to retrieve the bytes for writing to a file.

    SEQ64_SOLID_PIANOROLL_GRID:

        Enabling this macro makes the grid lines for the piano rolls
        more solid, with about the same perception of lightness.
        It also calls in some other tweaks, such as the positioning of
        markers.  We currently like this look a little better, and so it is
        the default.  See the app_limits.h header file for the definition of
        this variable.

    SEQ64_FOLLOW_PROGRESS_BAR:

        Currently disabled by default in the seqroll.cpp module, this macro
        turns on code that scrolls the sequence/pattern editor horizontally to
        keep the progress bar in view for long patterns, as the tune plays.
        It currently has the following issue:

            -   Tracking when controlled by the Song Mode, with a gap in the
                pattern triggering, causes the alignment of paging and
                progress to get out of whack.

    SEQ64_USE_DEBUG_OUTPUT:

        Enable this macro in the globals.h header file, to see extra console
        output if the application is compiled for debugging.  This macro
        can be activated only if PLATFORM_DEBUG is defined, which is taken
        care of by the build process.  If set, this macro turns on extra
        (i.e. too much) console output for the following modules:

            globals
            jack_assistant
            optionsfile
            user_settings
            And more...

    SEQ64_USE_VI_SEQROLL_MODE:

        Definable in the seqroll module, this macro allows the vi hjkl keys to
        be used as arrow keys for moving notes.  Not yet tested.  We will not
        make this a default, because it could drive non-vi users nuts.
        It is an extra complication for usage and testing, as well.

    USE_xxxxxx:

        This category of macro are usually undefined values that let us keep
        old code around in case we decide it was the better code after all.
        Generally, you do not want to change the status of these macros unless
        you are very familiar with the code.

DEPENDENCIES:

   With luck, the following dependencies will bring in their own
   dependencies when installed.

   Code:

      -  libgtkmm-2.4-dev (dev is the header-file package)
      -  libsigc++-2.0-dev
      -  libjack-jackd2-dev
      -  liblash-compat-dev (optional)
      -  libpng-dev (replaces libpng12-dev with libpng16, latest Debian Sid,
         and brings in libpng-tools)

   Runtime:

      -  libatk-adaptor (and its dependencies)
      -  libgail-common (and its dependencies)

   Build tools:

      -  automake and autoconf
      -  autoconf-archive
      -  g++
      -  make
      -  libtool
      -  More?

   Documentation:

      We have removed the automatic generation of the developer reference
      documentation.  It is a pain to deal with relative to the number of
      times one needs to read it.  To build it, change to the doc/dox
      directory and run "./make_dox reference".  Note that the PDF files
      will always be present and installed, even if not up-to-date with the
      latest code.

      -  doxygen and doxygen-latex
      -  graphviz
      -  texlive
      -  More?
      
   Debian packaging:

      -  debhelper
      -  fakeroot
      -  More?

   JACK Testing (optional):

      - qjackctl
      - a2jmidid (exposes Seq24 ALSA MIDI ports to JACK)
      - hydrogen
      - klick (a command-line metronome)
      - qtractor or other MIDI sequencers
      - gmidimonitor or (better) midisnoop

# vim: sw=4 ts=4 wm=4 et ft=sh
