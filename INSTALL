INSTALL for Sequencer64 v 0.9.9.10
Chris Ahlstrom
2015-09-10 to 2015-11-25

The current packaging for Sequencer64 is primarily aimed at developers.
There is currently no configure script... it must be bootstrapped.

Steps:

   0.  Preload any DEPENDENCIES, as listed at the end of this document.
       However, if some are missing, the configure script will tell you,
       or, at worst, a build error will tell you.

   1.  Check-out the branch you want.  Make a branch if you want to make
       changes.

   2. From the top project directory, run the commands:

      $ ./bootstrap
      $ ./configure

      For debugging without libtool getting in the way, just run the
      following command, which will add the --enable-debug and
      --disable-shared options to a configure run:

      $ ./bootstrap --enable-debug

   3. Run the make command:

      $ make

      If you do not care about the documentation and debian packaging,
      change to the various sub-project directories before running make.

   4. To install, become root and run:

      # make install

CONFIGURE OPTIONS FOR APPLICATION FEATURES:

    These options undefine the following build macros:

        SEQ64_HIGHLIGHT_EMPTY_SEQS
        SEQ64_LASH_SUPPORT
        SEQ64_JACK_SUPPORT
        SEQ64_JACK_SESSION

    --disable-highlight

        Undefines the SEQ64_HIGHLIGHT_EMPTY_SEQS  macro, which is
        otherwise defined by default.  If defined, the application will
        highlight empty sequences/patterns by coloring them yellow.

    --disable-lash

        Undefines the SEQ64_LASH_SUPPORT macro, which is otherwise defined
        by default.

    --disable-jack
    
        Undefines the SEQ64_JACK_SUPPORT macro, which is otherwise defined
        by default.

    --disable-jack-session

        Undefines the SEQ64_JACK_SESSION macro, which is defined if JACK
        support is defined, and the jack/session.h file is found.

MANUALLY-DEFINED MACROS IN CODE:

    The following items are not yet part of the configure script, but can
    be edited manually to achieve the desired settings:

    SEQ64_USE_NEW_FONT:

        Obsolete:  now a user-settings option.

        Already defined in the font module.  If defined, a new, anti-aliased,
        bold font is used in the user-interface.  This new font is implemented
        in new XPM files in resources/pixmaps directory: wen*.xpm.  The font
        is slightly larger, but changes the user-interface sizes only to an
        infinitesmal degree.  Using this new font is the default.

    SEQ64_USE_EVENT_MAP:

        Already defined in the event_list module.  It enables the usage of an
        std::multimap, instead of an std::list, to store MIDI events.  Because
        the code does a lot of sorting of events, using the std::multimap is
        actually a lot faster (especially under debug mode, where it takes
        many seconds for a medium-size MIDI file to load using the std::list
        implementation).

        There is still a chance that the std::multimap might prove the
        limiting factor during playback.  If that is the case, then we would
        probably implement dumping the multimap to a vector before playback.
        We shall see!

    SEQ64_USE_MIDI_VECTOR:

        Defined and used in the midifile module.  It provides the preferred
        alternative to the list for storing and counting the bytes of MIDI
        data.  It is an attempt to stop reversing certain events due to the
        peculiarities of using std::list to store MIDI bytes from a sequence.
        This new implementation uses std::vector and does not use pop_back()
        to retrieve the bytes for writing to a file.

    SEQ64_SOLID_PIANOROLL_GRID:

        Enabling this macro makes the grid lines for the piano rolls
        more solid, with about the same perception of lightness.
        It also calls in some other tweaks, such as the positioning of
        markers.  We currently like this look a little better, and so it is
        the default.  See the app_limits.h header file for the definition of
        this variable.

    SEQ64_USE_DEBUG_OUTPUT:

        Enable this macro in the globals.h header file, to see extra console
        output if the application is compiled for debugging.  This macro
        can be activated only if PLATFORM_DEBUG is defined, which is taken
        care of by the build process.  If set, this macro turns on extra
        console output for the following modules:

            globals
            jack_assistant
            optionsfile
            user_settings

    SEQ64_USE_VI_SEQROLL_MODE:

        Definable in the seqroll module, this macro allows the vi hjkl keys to
        be used as arrow keys for moving notes.  Not yet tested.  We will not
        make this a default, because it could drive non-vi users nuts.

    USE_xxxxxx:

        This category of macro are usually undefined values that let us keep
        old code around in case we decide it was the better code after all.

DEPENDENCIES:

   With luck, the following dependencies will bring in their own
   dependencies when installed.

   Code:

      -  libgtkmm-2.4-dev (dev is the header-file package)
      -  libsigc++-2.0-dev
      -  libjack-jackd2-dev
      -  liblash-compat-dev (optional)

   Runtime:

      -  libatk-adaptor (and its dependencies)
      -  libgail-common (and its dependencies)

   Build tools:

      -  automake and autoconf
      -  autoconf-archive
      -  g++
      -  make
      -  libtool
      -  More?

   Documentation:

      -  doxygen and doxygen-latex
      -  graphviz
      -  texlive
      -  More?
      
   Debian packaging:

      -  debhelper
      -  fakeroot
      -  More?

# vim: sw=4 ts=4 wm=4 et ft=sh
