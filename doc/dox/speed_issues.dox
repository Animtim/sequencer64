/*
 *    This module provides no code.  It provides only a Doxygen "Doxygen
 *    information" page.
 */
/**

\file       speed_issues.dox

This document describes some speed issues and how they can be handled.

\page       speed_issues_page Speed Issue of Sequencer64
\author     Chris Ahlstrom 2016-11-05

\section speed_issues_intro Introduction

This section describes some speed issues of Sequencer64.
Early on in our reboot of <i>seq24</i>, we noticed
that some of our larger files took a noticeable time to load.
It was only a few seconds, but seemed like a long time for such
small files.

Then we noticed that the MIDI container implementation used the
<code>std::list</code>
container, and also that it called <code>std::list::sort()</code>
after each event was added
to the container.

Our first thought was to replace the
<code>std::list</code> with an <code>std::multimap</code>.
Insertions into this container are made in the appropriate location (rather
than at the end), and so are automatically sorted.
We kept the old code around, but enabled the new multimap code via the
<code>SEQ64_USE_EVENT_MAP</code> macro.
This decreased the time of loading. 

(It also exposed a small number of bugs that users of <i>Sequencer64</i>
discovered and fixed.)

At the back of our minds was the possibility that the longer time needed to
increment a multimap iterator versus a list iterator would prove to limit
the amount of data that could be played back.  Once we finally created a large
file, <code>b4uacuse-stress.midi</code>, a 1.5 Mb file, we experienced
the limitations of that iterator during playback.  On our main development
laptop, a near-gaming <code>Intel i7</code> machine,
there were minor artifacts in playback.
On our old single-core laptop with 32-bit <code>Debian</code> installed,
the sequence would not play, and would continually and visibly refresh the
main window display.

So then we re-enabled the old <i>seq24</i> list implementation, and
found that the time needed to load
<code>b4uacuse-stress.midi</code> was over 6 minutes on our near-gamer
laptop and 13 minutes on the single-core laptop.

So, we had to find a way to get the fast loading speed of the
<code>std::multimap</code> and the faster speed of
the <code>std::list</code> iterator.
The obvious way was to go back to the
<code>std::list</code> container and stop sorting the container
after every insert, when loading the file.

This worked, but had some side-effects that had to be fixed.
We found that the <code>sequence::verify_and_link</code> function
required that the container be sorted first, and so we had to 
find the places where that function was called, and make sure that the
sorting had occurred.

Anyway, the current configuration for the usage of
<code>std::multimap</code> versus
<code>std::list</code> and the sorting of the MIDI container
after every event insertion versus after all the events are loaded
are deterimined only in <code>libseq64/include/seq64_features.h</code>:

\verbatim
   #undef SEQ64_USE_EVENT_MAP
   #undef SEQ64_PRESORT_EVENT_CONTAINER
   #ifdef SEQ64_USE_EVENT_MAP
   #undef SEQ64_PRESORT_EVENT_CONTAINER
   #endif
\endverbatim

Currently, the default is, as shown above, to not use the event multimap,
and to not presort events.  This makes loading fast, and playback
able to handle more sequences.  One can also try to use
the multimap, or use the list with pre-sorting, if bugs appear when
building the application with the default setting.
However, we really want to get the post-sorted
list implementation to work, to get fast loading speed and 
higher throughput at the same time.

The other options are available as a fallback in case
one gets struck by bugs in the default, and can afford
slower loads or less throughput.

 */

/*
 * speed_issues.dox
 *
 * vim: ts=3 sw=3 et syntax=doxygen
 */
