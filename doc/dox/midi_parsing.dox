/******************************************************************************
 * midi_parsing.dox
 *-----------------------------------------------------------------------------
 *
 *    This module provides no code.  It provides only a Doxygen "Doxygen
 *    information" page.
 *
 *------------------------------------------------------------------------*//**

\file       midi_parsing.dox

This document describes how Sequencer64 parses a MIDI file.

\page       midi_parsing_page MIDI File Parsing in Sequencer64
\author     Chris Ahlstrom 2015-11-27

\section midi_parsing_intro Introduction

This section describes the parsing of a MIDI file.  We start with
the main format that is supported, SMF 1.  Once we understood that
we, we figured out how to split a SMF 0 tracks correctly.

We split the midifile::parse() function into two sections.  The first section
analyzes the header of the MIDI.  Then, based on whether the file is SMF 1 (the
normal case) or SMF 0, either the parse_smf_1() function of or the
parse_smf_0() function is called.  The parse_smf_0() function creates one
sequence object per channel present in the SMF 0 file, plus the original track.
The last pattern slot (sequence 16) will contain the original track data, and
the rest will contain common data and then channel data for each channel.
After the parsing is done, all the tracks (including the original track) will
be added to the performance.  The user then has the option of deleting the
original track, which will be the last track.

\section midi_parsing_smf_1 SMF 1 Parsing

This section describes the parsing of the header chunk, MThd, and the track
chunk, MTrk.

The midifile::parse() function starts by opening the MIDI file, getting its
file-size, pre-allocating the data vector to that size, reading all of the
characters into that vector, and then closing the file.

\subsection midi_parsing_smf_1_mthd MIDI File Header, MThd

The data of the header is read:

\verbatim
   Header ID:     "MThd"         read_long()       4 bytes
   MThd length:     6            read_long()       4 bytes
   Format:        0, 1, 2        read_short()      2 bytes
   No. of track:  1 or more      read_short()      2 bytes
   PPQN:           192           read_short()      2 bytes
\endverbatim

The header ID and it's length are always the same values.  The formats that
Sequencer64 supports are 0 or 1.  SMF 0 has only one track, while SMF 1 can
support an arbitary number of tracks.  The last value in the header is the PPQN
value, which specifies the "pulses per quarter note", which is the basic
time-resolution of events in the MIDI file.  Common values are 96 or 192, but
higher values are also common.  Sequencer64 and its precursor, Seq24, default
to 192.

\subsection midi_parsing_smf_1_mtrk MIDI Track, MTrk

Sequencer64 next reads the tracks specified in the file.  Each track is assumed
to cover a different MIDI channel, but always the same MIDI buss.  (The MIDI
buss is not a data item in standard MIDI files, but it is a special data item
in Seq24/Sequencer64 MIDI files.)  Each track is tagged by a standard chunk
marker, "MTrk".  Other markers are possible, and are to be ignored, if nothing
else.  Here are the values read at the beginning of a track:

\verbatim
   Track ID:      "MTrk"         read_long()       4 bytes
   Track length:  varies         read_long()       4 bytes
\endverbatim

The track length is the number of bytes that need to be read in order to get
all of the data in the track.

Next, a new sequence object is created, with the PPQN value passed to its
constructor.  The sequence then is hooked to the master MIDI buss object.
The "RunningTime" accumulator is set to 0 for that track.

Next, the parse() function loops through the rest of the track, reading data
and logging it to the sequence.  Let's go through the loop, which is the meat
of the processing.

TODO:  An empty event is created before track processing, and re-used for every
track and event.  This seems dangerous.  We moved the event constructor two
levels of nesting deeper, and it seems to work fine.

<b>Delta time</b>.
The amount time that passes from one event to the next is the <i>delta
time</i>.  For some events, the time doesn't matter, and is set to 0.
This values is a <i>variable length value</i>, also known as a "VLV" or
a "varinum".   It provides a way of encoding arbitrarily large values, a byte
at a time.  For now, just note that a varinum is 1 or more bytes, and MIDI
provides a way to tell when the varinum is complete.

\verbatim
   Delta time:    varies         read_varinum()    1 or more bytes
\endverbatim

\subsubsection midi_parsing_smf_1_channel  Channel Events

<b>Status</b>.
The byte after the delta time is examined by masking it against 0x80 to check
the high bit.  If not set, it is a "running status", it is replaced with the
"last status", which is 0 at first.

\verbatim
   Status byte:   varies         read_byte()       1 byte
\endverbatim

If the high bit is set, it is a status, and is passed to the setter
<code>event::set_status()</code>.

The "RunningTime" accumulator is incremented by the delta-time.  The current
time is adjusted as per the PPQN ratio, if needed, and passed to the setter
<code>event::set_timestamp()</code>.

Now what does the status mean?  First, the channel part of the status is masked
out using the 0xF0 mask.

If it is a 2-data-byte event (note on, note off, aftertouch, control-change, or
pitch-wheel), then the two data bytes are read:

\verbatim
   Data byte 0:   varies         read_byte()       1 byte
   Data byte 1:   varies         read_byte()       1 byte
\endverbatim

If the status is a note-on event, with data[1] = 0, then it is converted to a
note-off event, a fix for the output quirks of some MIDI devices, and the
status of the event is amended to EVENT_NOTE_OFF.

If it is a 1-data-btye event (program change or channel pressure), then only
data byte 0 is read.

Then the one or two data bytes are added to the event by overloads of
<code>event::set_data()</code>, the event is added to the current sequence by
<code>sequence::add_event()</code>, and the MIDI channel of the sequence is set
by <code>sequence::set_midi_channel()</code>.

Note that this is the point where parsing could detect a change in channel, and
select a new sequence to support that channel, and add the events to that
sequence, if the file were SMF 0.

Also note that the channel of the sequence is set every a new channel
event/status is read.  This should be done once, and then simply warned about
if a non-matching channel occurs.

Lastly, note that it might be better to do the sequence function calls at the
end of processing the event.

\subsubsection midi_parsing_smf_1_meta  Meta Events

If the event status masks off to 0xF0 (0xF0 to 0xFF), then it is a meta event.
If the status is 0xFF, it is called a "Sequencer-specific", or "SeqSpec" event.
For this kind of event, then a type byte and the length of the event are
read.

\verbatim
   Meta type:     varies         read_byte()       1 byte
   Meta length:   varies         read_varinum()    1 or more bytes
\endverbatim

If the type of the SeqSpec (0xFF) meta event is 0x7F, parsing checks to see if
it is one of the Seq24 "proprietary" events.  These events are tagged with
various values that mask off to 0x24240000.  The parser reads the tag:

\verbatim
   Prop tag:     0x242400nn      read_long()       4 bytes
\endverbatim

These tags provide a way to save and recover Seq24/Sequencer64 properties from
the MIDI file: MIDI buss, MIDI channel, time signature, sequence triggers, and
(new), the key, scale, and background sequence to use with the track/sequence.
Any leftover data for the tagged event is let go.  Unknown tags ate skipped.

If the type of the SeqSpec (0xFF) meta event is 0x2F, then it is the
End-of-Track marker.  The current time is set using
<code>sequence::set_length()</code> and then
<code>sequence::zero_markers()</code> is called, and parsing is done for
that track.

If the type of the SeqSpec (0xFF) meta event is 0x03, then it is the sequence
name.  The "length" number of bytes are read, and loaded by
<code>sequence::set_name()</code>.

If the type of the SeqSpec (0xFF) meta event is 0x00, then it is the sequence
number, which is read:

\verbatim
   Seq number:    varies         read_short()      2 bytes
\endverbatim

Note that the sequence number might be modified latter to account for the
current screenset in force for a file import operation.

Anything other SeqSpec type is simply skipped by reading the "length" number of
bytes.

To summarize the process, here are the relevant event and sequence setter
calls typically made while parsing a MIDI track:

   -# <code>perform::add_sequence()</code>
      -# <code>sequence::sequence()</code>
      -# <code>sequence::set_master_midi_bus())</code>
      -# <code>sequence::add_event()</code>
         -# <code>event::event()</code>
         -# <code>event::set_status()</code>
         -# <code>event::set_timestamp()</code>
         -# <code>event::set_data()</code>
      -# <code>sequence::set_midi_channel()</code>
      -# <code>sequence::set_length()</code>
      -# <code>sequence::zero_markers()</code>
      -# <code>sequence::set_name()</code>
      -# <code>sequence::set_midi_bus()</code>
   -# <code>xxxxx::yyyy()</code>

\subsection midi_parsing_smf_1_meta  Meta Events

Here, we summarize the MIDI meta events.

   -# <code>FF 00 02 ssss</code>: Sequence Number.
   -# <code>FF 01 len text</code>: Text Event.
   -# <code>FF 02 len text</code>: Copyright Notice.
   -# <code>FF 03 len text</code>: Sequence/Track Name.
   -# <code>FF 04 len text</code>: Instrument Name.
   -# <code>FF 05 len text</code>: Lyric.
   -# <code>FF 06 len text</code>: Marker.
   -# <code>FF 07 len text</code>: Cue Point.
   -# <code>FF 08 len text</code>: Patch/program Name.
   -# <code>FF 09 len text</code>: Device Name.
   -# <code>FF 0A through 0F len text</code>: Other kinds of text events.
   -# <code>FF 20 01 cc</code>: MIDI channel (obsolete, used by Cakewalk)
   -# <code>FF 21 01 pp</code>: MIDI port (obsolete, used by Cakewalk)
   -# <code>FF 2F 00</code>: End of Track.
   -# <code>FF 51 03 tttttt</code>: Set Tempo, us/qn.
   -# <code>FF 54 05 hr mn se fr ff</code>: SMPTE Offset.
   -# <code>FF 58 04 nn dd cc bb</code>: Time Signature.
   -# <code>FF 59 02 sf mi</code>: Key Signature.
   -# <code>FF 7F len data</code>: Sequencer-Specific.

The next sections describe the events that <i>Sequencer</i> tries to handle.
These are 

   -  Sequence Number (0x00)
   -  Track Name (0x03)
   -  End-of-Track (0x2F)
   -  Set Tempo (0x51) (Sequencer64 only)
   -  Time Signature (0x58) (Sequencer64 only)
   -  Sequencer-Specific (0x7F)
   -  System Exclusive (0xF0) Sort of handled, functionality incomplete..

\subsubsection midi_parsing_smf_1_number  Sequence Number (0x00)

\verbatim
   FF 00 02 ss ss
\endverbatim

This optional event must occur at the beginning of a track,
before any non-zero delta-times, and before any transmittable MIDI
events.  It specifies the number of a sequence.

\subsubsection midi_parsing_smf_1_name  Track/Sequence Name (0x03)

\verbatim
   FF 03 len text
\endverbatim

If in a format 0 track, or the first track in a format 1 file, the name
of the sequence.  Otherwise, the name of the track.

\subsubsection midi_parsing_smf_1_eot  End of Track (0x2F)

\verbatim
   FF 2F 00
\endverbatim

This event is not optional.  It is included so that an exact ending
point may be specified for the track, so that it has an exact length,
which is necessary for tracks which are looped or concatenated.

\subsubsection midi_parsing_smf_1_tempo  Set Tempo Event (0x51)

The MIDI Set Tempo meta event sets the tempo of a MIDI sequence in terms of
the microseconds per quarter note.  This is a meta message, so this event is
never sent over MIDI ports to a MIDI device.

After the delta time, this event consists of six bytes of data:

\verbatim
   FF 51 03 tt tt tt
\endverbatim

Example:

\verbatim
   FF 51 03 07 A1 20
\endverbatim

   -# 0xFF is the status byte that indicates this is a Meta event.
   -# 0x51 the meta event type that signifies this is a Set Tempo event.
   -# 0x03 is the length of the event, always 3 bytes.
   -# The remaining three bytes carry the number of microseconds per quarter
      note.  For example, the three bytes above form the hexadecimal value
      0x07A120 (500000 decimal), which means that there are 500,000
      microseconds per quarter note.

Since there are 60,000,000 microseconds per minute, the event above
translates to: set the tempo to 60,000,000 / 500,000 = 120 quarter notes per
minute (120 beats per minute).

This event normally appears in the first track. If not, the default tempo is
120 beats per minute.  This event is important if the MIDI time division is
specified in "pulses per quarter note", which does not itself define the length
of the quarter note. The length of the quarter note is then determined by the
Set Tempo meta event.

Representing tempos as time per beat instead of beat per time
allows absolutely exact DWORD-term synchronization with a time-based sync
protocol such as SMPTE time code or MIDI time code.  This amount of
accuracy provided by this tempo resolution allows a four-minute piece at
120 beats per minute to be accurate within 500 usec at the end of the
piece.

\subsubsection midi_parsing_smf_1_timesig  Time Signature Event (0x58)

After the delta time, this event consists of seven bytes of data:

\verbatim
   FF 58 04 nn dd cc bb
\endverbatim

The time signature is expressed as four numbers.  nn and dd represent
the numerator and denominator of the time signature as it would be
notated.  The denominator is a negative power of two:  2 represents a
quarter-note, 3 represents an eighth-note, etc.  The cc parameter
expresses the number of MIDI clocks in a metronome click.  The bb
parameter expresses the number of notated 32nd-notes in a MIDI quarter-
note (24 MIDI Clocks).

Example:

\verbatim
   FF 58 04 04 02 18 08
\endverbatim

   -# 0xFF is the status byte that indicates this is a Meta event.
   -# 0x58 the meta event type that signifies this is a Time Signature event.
   -# 0x04 is the length of the event, always 4 bytes.
   -# 0x04 is the numerator of the time signature, and ranges from 0x00 to
      0xFF.
   -# 0x02 is the log base 2 of the denominator, and is the power to which 2
      must be raised to get the denominator.  Here, the denominator is 2 to
      0x02, or 4, so the time signature is 4/4.
   -# 0x18 is the metronome pulse in terms of the number of
      MIDI clock ticks per click.  Assuming 24 MIDI clocks per quarter note,
      the value here (0x18 = 24) indidicates that the metronome will tick every
      24/24 quarter note.  If the value of the sixth byte were 0x30 = 48, the
      metronome clicks every two quarter notes, i.e. every half-note.
   -# 0x08 defines the number of 32nd notes per beat. This byte is usually 8
      as there is usually one quarter note per beat, and one quarter note
      contains eight 32nd notes.

If a time signature event is not present in a MIDI sequence, 4/4 signature is
assumed.

In <i>Sequencer64</i>, the c_timesig SeqSpec event is given priority.  The
conventional time signature is used only if the c_timesig SeqSpec is not
present in the file.

\subsubsection midi_parsing_smf_1_sysex  SysEx Event (0xF0)

If the meta event status value is 0xF0, it is called a "System-exclusive", or
"SysEx" event.

\verbatim
   F0 len data F7
\endverbatim

<i>Sequencer64</i> has some code in place to store these messages, but the data
is currently not actually stored or used.
Although there is some infrastructure to support storing the SysEx event within
a sequence, the SysEx information is simply skipped.
<i>Sequencer64</i>  warns if the
terminating 0xF7 SysEx terminator is not found at the expected length.
Also, some malformed SysEx events have been encountered, and those are
detected and skipped as well.

\subsubsection midi_parsing_smf_1_seqspec  Sequencer Specific (0x7F)

This data, also known as SeqSpec data, provides a way to encode information
that a specific sequencer application needs, while marking it so that other
sequences can safely ignore the information.

\verbatim
   FF 7F len data
\endverbatim

In <i>Seq24</i> and <i>Sequencer64</i>, the data portion starts with four bytes
that indicate the kind of data for a particular SeqSpec event:

\verbatim
   c_midibus        ^  0x24240001  Track buss number
   c_midich         ^  0x24240002  Track channel number
   c_midiclocks     *  0x24240003  Track clocking
   c_triggers       ^  0x24240004  See c_triggers_new
   c_notes          *  0x24240005  Song data, notes
   c_timesig        ^  0x24240006  Track time signature
   c_bpmtag         *  0x24240007  Song beats/minute
   c_triggers_new   ^  0x24240008  Track trigger data
   c_mutegroups     *  0x24240009  Song mute group data
   c_midictrl       *  0x24240010  Song MIDI control
   c_musickey       +  0x24240011  Track key (Sequencer64 only)
   c_musicscale     +  0x24240012  Track scale (Sequencer64 only)
   c_backsequence   +  0x24240013  Track background sequence (Sequencer64 only)

   * = global only; ^ = track only; + = both
\endverbatim

In <i>Seq24</i>, these events are placed at the end of the song, but are
not marked as SeqSpec data.  Most MIDI applications handle this situation fine,
but some (e.g. midicvt) do not.  Therefore, <i>Sequencer64</i> makes sure to
wrap each data item in the 0xFF 0x7F wrapper.

Also, the last three items above (key, scale, and background sequence)
can also be stored (by <i>Sequencer64</i>) with a particular sequence/track, as
well as at the end of the song.  Not sure if this bit of extra flexibility is
useful, but it is there.

\subsubsection midi_parsing_smf_1_end  Non-Specific End of Sequence

Any other statuses are deemed unsupportable in <i>Sequencer64</i>, and abort
parsing with an error.

If the --bus option is in force, <code>sequence::set_midi_bus()</code> is
called to override the buss number (if any) stored with the sequence.

Finally, <code>perform::add_sequence()</code> adds the sequence to the
encoded tune.

\section midi_parsing_smf_0 SMF 0 Parsing

After parsing SMF 1 track data, we end up with a number of sequences, each on a
different MIDI channel.  With SMF 0, data for all channels is present in a
single track.  Sequencer64 will read SMF 0 data, but we really need to be able
to have one MIDI channel per track.  So we need to take the data from the
sequence and use it to make more sequences.

TODO: 

<code>sequence::add_event()</code>
<code>sequence::set_midi_channel()</code>.
<code>sequence::set_length()</code>
<code>sequence::set_midi_bus()</code>
<code>perform::add_sequence()</code>

 *//*-------------------------------------------------------------------------*/

/******************************************************************************
 * midi_parsing.dox
 *----------------------------------------------------------------------------
 * vim: ts=3 sw=3 et syntax=doxygen
 *//*-------------------------------------------------------------------------*/
