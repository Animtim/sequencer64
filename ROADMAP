Sequencer64 Roadmap
Chris Ahlstrom
2015-09-10 to 2015-12-23

The starting point for the Sequencer64 project is version 0.9.4 of
Sequencer24.  Sequencer24 itself started with version 0.9.2 of Seq24.

Latest version: 0.9.9.12
Current branch: events-->master, second round of branch pending

The following changes are planned ('x' means it is done, 'y' means it is
in progress, and 'z' means it will be moved to a later branch).  But also
note that there is a lot of work to do that is listed in the
contrib/bugs-to-investigate.txt file!

y  -  Branch off to various incremental branches:
   y  -  Break out non-GUI functionality into libsequencer64.
      x  -  Branch "perform":  refactoring the perform class for
            configuration file access and Gtk/Gdk support.  Also
            separated out the JACK support.  Finish on 2015-09-19.
      x  -  Branch "guibase":  Creating a base class for Gtk::Drawable
            and using that in one of the GUI modules.
   x  -  Branch "sequencer": Try to replace sequencer event container with
         something faster.   We found that using std::multimap instead
         of std::list works well, and, in debug mode, the loading of a
         MIDI file is a *lot* faster.
      y  Unit test each element as appropriate using xpc-suite
         functionality.
   y  -  Add some base classes and additional member functions for common
         functionality:
      x  -  Gtk::Drawable-derived base class
         -  Handle Windows vs. Linux code more cleanly.
            -  Windows/Linux mastermidibus bases class
            -  Windows/Linux midibus bases class
      x  -  An autolock object to simplify many of the locked functions.
      -  Enhance documentation and recreate it.
   x  -  Rebuild application using library code.
   y  -  Verify functionality.
y  -  Branch off to an "testing", "testing2", "testing3"  branch to perform
      testing, tweaking, and, quite frankly, some fairly significant
      enhancements along the way.
      y  Created a separate GitHub project, seq64-tests, to do some
         unit-testing of Sequencer64, and to provide a test bed to make
         more certain that new features do not break existing
         functionality.
      y  Still more refactoring of the application.
      -  Created another set of font pixmaps for an anti-aliased font to
         replace the retro "PC" font used by Seq24.
      y  Still working on making it possible to deal with files with
         a PPQN other than 192.
      y  Added arrow-key and "p/P" paint support.
      y  Added grid and sequence display configuration options to the "user"
         configuration file.
      y  Added compile-time option to smooth out the lines on the piano rolls.
      y  Added ability to store the musical key, musical scale, and the
         background sequence number with each sequence, in the MIDI file.
      -  Did not quite finish testing, but it is time to merge back to
         "master", and do some more "testing" branches!
   -  Branch off to an "Enhancements" branch (highly provisional):
      -  Convert to gtkmm-3.
      -  Add optional build using Qt 5.
      -  Flesh out the support for PortMidi.
      -  Support MingW builds in Windows a la the Subatomic Glue port.
   -  To fix:  See the contrib/bugs_to_investigate.txt

Eventually, there will be a few features and fixes to try to add:

   y  A MIDI event text pane to display (and later edit) all MIDI events.
   -  Speed up the horizontal resize on the Song/Performance Editor.
   -  Make it possible to use Alt or Ctrl plus a sequence-toggling
      key to bring up an edit dialog for that sequence.
   -  Get the Song editor "Increase size of grid" button working.
      Also document it.
  -   Consider an option to override the proprietary section with data
      from a file.

# vim: sw=4 ts=4 wm=4 et ft=sh
