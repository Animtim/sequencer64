=== modified file 'configure.in'
--- configure.in	2009-06-26 18:04:14 +0000
+++ configure.in	2010-03-03 13:49:48 +0000
@@ -88,6 +88,11 @@
                 AC_DEFINE(JACK_SUPPORT, 1, [Define to enable JACK driver])
                 USER_LDFLAGS="${USER_LDFLAGS} $(pkg-config --libs jack )"
                 features_list="${features_list} (Jack)"
+		AC_CHECK_HEADER(jack/session.h, jack_session_found="yes", jack_session_found="no")
+		if test "$jack_session_found" = "yes"; then
+			AC_DEFINE(JACK_SESSION, 1, [Define to enable jack session support])
+		fi
+
         else
                 AC_MSG_WARN([ *** Could not find the JACK library, disabling JACK support])
         fi

=== modified file 'src/globals.h'
--- src/globals.h	2009-06-24 19:54:14 +0000
+++ src/globals.h	2010-03-01 03:44:12 +0000
@@ -159,6 +159,7 @@
 extern bool global_manual_alsa_ports;
 
 extern Glib::ustring global_filename;
+extern Glib::ustring global_jack_session_uuid;
 extern Glib::ustring last_used_dir;
 extern bool is_pattern_playing;
 

=== modified file 'src/perform.cpp'
--- src/perform.cpp	2009-09-26 07:48:12 +0000
+++ src/perform.cpp	2010-03-26 14:22:34 +0000
@@ -191,8 +191,16 @@
             snprintf(client_name, sizeof(client_name), "seq24 (%d)", getpid());
 
             /* become a new client of the JACK server */
-            if ((m_jack_client = jack_client_open(client_name,
-                            JackNullOption, NULL)) == 0) {
+#ifdef JACK_SESSION
+	    if (global_jack_session_uuid.empty())
+		m_jack_client = jack_client_open( "seq24", JackNullOption, NULL );
+	    else
+		m_jack_client = jack_client_open( "seq24", JackSessionID, NULL, global_jack_session_uuid.c_str() );
+#else
+	    m_jack_client = jack_client_open( "seq24", JackNullOption, NULL );
+#endif
+
+            if (m_jack_client == 0) {
                 printf( "JACK server is not running.\n[JACK sync disabled]\n");
                 m_jack_running = false;
                 break;
@@ -201,6 +209,11 @@
             jack_on_shutdown( m_jack_client, jack_shutdown,(void *) this );
             jack_set_sync_callback(m_jack_client, jack_sync_callback,
                     (void *) this );
+#ifdef JACK_SESSION
+	    if (jack_set_session_callback)
+		jack_set_session_callback(m_jack_client, jack_session_callback,
+			(void *) this );
+#endif
 
             /* true if we want to fail if there is already a master */
             bool cond = global_with_jack_master_cond;
@@ -1147,15 +1160,11 @@
     return 0;
 }
 
-
-
 #ifdef JACK_SUPPORT
 
 int jack_sync_callback(jack_transport_state_t state, 
         jack_position_t *pos, void *arg)
 {
-    //printf( "jack_sync_callback() " );
-
     perform *p = (perform *) arg;
 
     p->m_jack_frame_current = jack_get_current_transport_frame(p->m_jack_client);
@@ -1198,6 +1207,39 @@
     return 1;
 }
 
+#ifdef JACK_SESSION
+
+bool perform::jack_session_event()
+{
+    Glib::ustring fname( m_jsession_ev->session_dir );
+    fname += "file.mid";
+
+    Glib::ustring cmd( "seq24 --file \"${SESSION_DIR}file.mid\" --jack_session_uuid " );
+    cmd += m_jsession_ev->client_uuid;
+
+    midifile f(fname);
+    f.write(this);
+
+    m_jsession_ev->command_line = strdup( cmd.c_str() );
+
+    jack_session_reply( m_jack_client, m_jsession_ev );
+
+    if( m_jsession_ev->type == JackSessionSaveAndQuit )
+        Gtk::Main::quit();
+
+    jack_session_event_free (m_jsession_ev);
+
+    return false;
+}
+
+void jack_session_callback(jack_session_event_t *event, void *arg )
+{
+    perform *p = (perform *) arg;
+    p->m_jsession_ev = event;
+    Glib::signal_idle().connect( sigc::mem_fun( *p, &perform::jack_session_event) );
+}
+
+#endif
 #endif
 
 

=== modified file 'src/perform.h'
--- src/perform.h	2009-05-28 21:23:40 +0000
+++ src/perform.h	2010-03-03 14:12:05 +0000
@@ -38,6 +38,9 @@
 #ifdef JACK_SUPPORT
 #include <jack/jack.h>
 #include <jack/transport.h>
+#ifdef JACK_SESSION
+#include <jack/session.h>
+#endif
 #endif
 
 
@@ -168,7 +171,12 @@
     jack_transport_state_t m_jack_transport_state;
     jack_transport_state_t m_jack_transport_state_last;
     double m_jack_tick;
-    
+#ifdef JACK_SESSION
+ public:
+    jack_session_event_t *m_jsession_ev;
+    bool jack_session_event();
+ private:
+#endif
 #endif
     
     bool m_jack_running;
@@ -367,6 +375,7 @@
 void jack_shutdown(void *arg);
 void jack_timebase_callback(jack_transport_state_t state, jack_nframes_t nframes, 
                             jack_position_t *pos, int new_pos, void *arg);
+void jack_session_callback(jack_session_event_t *ev, void *arg);
 #endif
 
 

=== modified file 'src/seq24.cpp'
--- src/seq24.cpp	2009-06-18 15:50:52 +0000
+++ src/seq24.cpp	2010-03-01 03:39:15 +0000
@@ -54,6 +54,7 @@
     {"jack_master",0, 0, 'J'},
     {"jack_master_cond",0,0,'C'},
     {"jack_start_mode", required_argument, 0, 'M' },
+    {"jack_session_uuid", required_argument, 0, 'U' },
     {"manual_alsa_ports", 0, 0, 'm' },
     {"pass_sysex", 0, 0, 'P'},
     {"show_keys", 0,0,'k'},
@@ -79,6 +80,7 @@
 bool global_with_jack_master = false;
 bool global_with_jack_master_cond = false;
 bool global_jack_start_mode = true;
+Glib::ustring global_jack_session_uuid = "";
 
 user_midi_bus_definition   global_user_midi_bus_definitions[c_maxBuses];
 user_instrument_definition global_user_instrument_definitions[c_max_instruments];
@@ -252,6 +254,8 @@
                 global_device_ignore = true;
                 global_device_ignore_num = atoi( optarg );
                 break;
+	    case 'U':
+		global_jack_session_uuid = Glib::ustring(optarg);
                 
             case 'x':
                 global_interactionmethod = (interaction_method_e)atoi( optarg );

