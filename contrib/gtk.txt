Notes for Factoring Out Gtk+
Chris Ahlstrom
2015-09-18 to 2015-09-18

Keys:

    The first factoring out is already done:  pulling Gtk/Gdk keystroke
    support out of the perform class and providing that class with a
    keys_perform-derived reference for actually manipulating the keys used
    to control the performance.  This was a fairly easy refactoring, and
    mainly provides access to the Gtk+ keys symbols.

Quit:

    <gtkmm/main.h>

    In jack_assistant, the JackSessionSaveAndQuit session-event causes
    Gtk::Main::quit() to be called.  Gtk::Main is a static instance, and
    quit() is a static void function to exit the application.

Connect:

    <gtkmm/main.h>

    In jack_assistant, there is a call to 

    Glib::signal_idle().connect
    (
        sigc::mem_fun(*jack, &jack_assistant::session_event)
    )

    The signature for the jack_assistant callback is "bool session_event()".
    The signal_idle().connect() call connects an idle-handler to the
    glibmm main-event loop.

    We want to offload this functionality to the seq_gtkmm2 library.
    How?  Ideas:

        1. Make a jack_assistant::idle_connect() function that calls this
           code, and put the implementation in a small module in that
           library.  
        2. Same as 1, except:
           a. Inherit jack_assistant from an interface class for "guis". 
           b. Or pass in an Gtk-2-specific implementation as was done
              for the keys_perform_gtk2 class in perform.
        3. Use a feature-macro to enable the various implementations of
           this "one-liner" piece of code.

    Other connect() calls (all are present in the seq_gktmm2 library
    already):

    m_button_ok->signal_clicked().connect(mem_fun(*this, &options::hide));
    m_button_grow->signal_clicked().connect(mem_fun(*this, &perfedit::grow));
    m_button_copy->signal_clicked().connect(mem_fun(*this, &perfedit::copy));
    Glib::signal_timeout().connect(mem_fun(*this, &seqtime::idle_progress), 50);

    hide() is a Gtk::Window (?) function ("void hide()") and is the
    opposite of show().  grow() and copy() are perfedit functions.
    bool seqtime::idle_progress() simply returns true.

gtkmm 2.4 to gtkmm 3.0:

    See the following link for details:

    https://developer.gnome.org/gtkmm-tutorial/stable/changes-gtkmm3.html.en

     1. Gtk::AppChooserXxxx classes to open various kinds of content.
     2. Grid will eventually replace Box and Table.
     3. Switch improves over CheckBox.
     4. CellLayout (used IconView, TreeView, and ComboBox) now has a
        CellArea to specify more details about CellRenderers.
     5. ComboBox derives from CellLayout.
     6. Adjustment, IconSet, and Gdk::Cursor are now used via
        Glib::RefPtr.
     7. IconView, TextView, TreeView, etc. now derive from Scrollable.
        No longer have get_vadjustment() etc. and their won
        set_scroll_adjustments signal.
     8. Style and Rc replaced by StyleContext and by StyleProviders such
        as CssProvider.
     9. Widget::on_expose_event() replaced by on_draw(), using
        Cairo::Context (libcairomm?), no need for calling
        Cairo::Context::clip().
    10. Gdk::RGBA replaces Color; Colormap removed.
    11. Gdk::Pixmap and Bitmap remove in favor of Pixbuf.
    12. Gdk::Drawable removed, its methods moved into Gdk::Window.
    13. std::vector used instead of *Handle types.
    14. All deprecated API removed.
     



# vim: sw=4 ts=4 wm=8 et ft=sh
