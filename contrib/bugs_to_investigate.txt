Bugs and Upgrade Ideas
Chris Ahlstrom
2015-10-27 to 2015-11-01

In no particular order...

-  Document that right-click on pattern editor's left and right scrollbar arrows
   act like Home and End for the seqroll.
-  Provide an "infinite" pattern that will not repeat (unless specified
   multiple times in the performance editor).
   "Infinite" sequences, aka a "track" as opposed to a sequence.
-  Support for the Non Session Manager.
-  Muting in mainwid or perfnames should be reflected in both views.
-  Extra lines appearing in perfnames/perfroll when starting playback in
   perfroll.
-  Anyway to double-click a pattern to edit, without selecting it?
   Or by holding the Shift key or Mod4 key with the letter?
-  Moving a pattern doesn't turn on any dirty bit, to allow an opportunity for
   saving.  This is a legacy bug.  Tighten up the is-dirty handling for all
   dialogs.
-  Selecting note events is iffy, more so than in legacy.
x  Would be nice to be able move selected notes in the seqroll using
   the arrow keys, in one-key and one-snap resoltion increments.
   See seq24seqroll.cpp, line 305.  Done.  Added keys for
   paint mode (p, Shift-P), left, right, down, and up, enabled if any notes
   are selected.  Still need to figure out what left, right, and home do
   otherwise, needs some graphical feedback.
-  Would be nice to have the sequence editors and performance editor scroll to
   keep the progress bar in view.
-  Would be nice to show the current time/tick/measure/bar in the tune as
   it plays.
-  Would be nice to show the current note/time/tick/measure/bar in sequence
   editor and performance editor windows.
-  Stop progress bar when pattern not playing in performance editor.
-  New stuff to implement in all relevant modules:
   -  Use of is_channel_msg(), is_one_byte_msg(), is_two_byte_msg()
   -  The new variants of the SEQ64_CLICK_xxxxx macros.
-  Get variable PPQN support fully working!
-  Offload the scale functionality to a new "scale" class.
-  Update maintime to support use of the the current beat-width, instead of
   using 4 all the time.
-  Investigate adding wrappers for draw_drawable().  (Done for the most common
   use case).
-  Selecting some notes of the same value, and trying to elongate or shrink
   them can make a note of "infinite" length.
-  When closing a file, either need to blank out or close any pattern-editor
   windows and the performance editor; something like that.
-  Add one or two digits to the size of the "Sequence length in bars" field, at
   the expense of its pixmap button.  Add an "infinite" option to that value.
-  Finish adding elements to the "user" configuration file.
-  Using SEQ64_ key and event macros instead of GDK_ key and event macros.

comparison between ‘enum GdkEventType’ and
‘enum seq 64::seq_event_type_t’
     if (a_p0->type == SEQ64_KEY_PRESS)

comparison between ‘enum GdkScrollDirection’ and
‘enum seq64::seq_scroll_direction_t’ [-Wenum-compare]
     if (a_ev->direction == SEQ64_SCROLL_UP)

comparison between ‘enum GdkScrollDirection’ and
‘e$um seq64::seq_scroll_direction_t’
     else if (a_ev->direction == SEQ64_SCROLL_DOWN)

draw_drawable( gc , src , xsrc , ysrc , xdest , ydest , width , height ):

-  Drawable->draw_drawable(GC, Pixmap, x, y, x0, y0, fontw, fonth)
-  Drawable->draw_drawable(m_gc, Drawable, x, y, x0, y0, fontw, fonth)
-  Drawable->draw_drawable(m_gc, Pixmap, x, y, x0, y0, fontw, fonth)
-  Drawable->draw_drawable(m_gc, m_background, x, y, x0, y0, fontw, fonth)
x  m_window->draw_drawable(m_gc, m_pixmap,  ...)

-  Initiatives from other projects ("-" means "not done (yet)", "y" means
   "partially done", "x" means done, "0" means "will not do"):
   0  Porting to BSD:         https://github.com/vext01/seq24
         Obviously a very old fork of seq24, with a lot of diffs from 0.9.2.
   y  AUR archive files:      https://github.com/aur-archive/seq24
   x  freddix patches:        https://github.com/freddix/seq24
   x  pld-linux patches:      https://github.com/pld-linux/seq24
   x  OpenMandriva patches:   https://github.com/OpenMandrivaAssociation/seq24
   0  Launchpad mapper:       https://github.com/Excds/seq24-launchpad-mapper
   0  Fork of seq24:          https://github.com/orlammd/SC_seq24
         An apparent odd mix of versions, and some French cusses.
   0  git-ingore, license:    https://github.com/franticspider/seq24plus
   0  Basic inspiration:      https://github.com/analoq/seq
   0  In-browser seq24:       https://github.com/briandunn/seq25
   0  One-up of seq25:        https://github.com/jgdavey/seq26
   0  Ruby implementation:    https://github.com/chriserin/seq27
   0  Song-editing emph:      https://github.com/sbrauer/seq42
         Another old fork, lacking mainwid and perfedit, but has a couple of
         nice ideas to examine.

Notes from around the Web:

   I forgotten instructions of use. 'p' to activate paint, 'P' (shift p) to
   deactivate.  Remember to "select" the piano roll instead of writing on other
   controls, like the name edit. that's a little tricky but you will overcome
   that.  ivan

seqroll.cpp:

>               m_seq->remove_marked();
>               ret = true;
>           }
> +         if ( a_p0->keyval ==  GDK_p ){
> +             set_adding( true );
> +             ret = true;
> +         }
> +         if ( a_p0->keyval ==  GDK_P ){
> +             set_adding( false );
> +             ret = true;
> +         }
>   
>           if ( a_p0->state & GDK_CONTROL_MASK ){

   We've now incorporated this feature (2015-11-01).


