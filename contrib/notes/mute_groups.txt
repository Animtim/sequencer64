Mute-Group Explorations
Chris Ahlstrom
2015-12-23 to 2016-10-08

In this document we explore mute-groups, how they might work, and
Tim fixes to them.  The primary module under discussion is the
perform module.

   m_play_screen_offset:

      This is a variable I introduced to save some multiplications.
      It is set to m_playing_screen * m_seqs_in_set in the
      perform::set_playing_screenset() function.

      That function is called in handle_midi_control() to implement the
      c_midi_control_play_ss command.  Also called in
      perform::mainwnd_key_event() to handle the keypress in mainwnd.

      perform::set_playing_screenset() also sets m_playing_screen to the
      selected screen-set.

      m_play_screen_offset is also used in select_group_mute().  That function
      acts if m_mode_group_learn is true.  It gets the playing status of all
      the sequences in the "playing" screenset and sets each mute-group member
      in that screenset to the that playing status.

   m_screenset [replaces m_playscreen_offset in the select_mute_group()
   function, but the usage makes it essentially replace m_playing_screen.]

	https://linuxmusicians.com/viewtopic.php?t=2443&start=15

        For anyone else who is interested in working with Mute Groups -
        I will point out here the main problem that I had getting them
        working (and this applies more to using it from the laptop rather
        than the Midi side of things)...

        To set up the Mute Groups you press the 'L' button on the top of
        the SEQ24 window, and then press a key on your keyboard to 'learn'
        or 'save' the preset. Looking at the list of keys assigned for
        these mute groups (in File, Options, Keyboard), the first bank of
        keys are ! ' ? etc and th second bank are Q W E etc...  When you
        ask the program to 'learn' the key, you can't use the SHIFT key,
        so (on Windows at least) you are not able to use the ! or other
        symbol keys. Similarly, you need to make sure CAPS LOCK is on
        before you start the 'learn' process (as it won't recognise q only
        Q)

            Sequencer64 fixes this issue by automatically converting these
            keys to their shifted versions when group-learn mode is
            active.
        
        (I'm sure you could change all the key settings in the Keyboard
        screen to help overcome some of these issues)

        Once that is working OK, you can configure the MIDI settings in
        similar ways to assigning midi commands to toggle loops - just
        note that you have to use the 'ON' option in the .seq24rc file
        (which is the second set of numbers) - you cannot use the first set
        (used to 'toggle').

From another source:

    You can toggle the playing status of up to 32 previously defined
    mute/unmute patterns (groups) in the active screen set, similar to
    hardware sequencers.  This is done either by one of the 'group toggle'
    keys or by a MIDI controller, both assigned in the .seq24rc file.  A
    Mute/Unmute pattern (group) is stored by holding a 'group learn' key
    while pressing the corresponding 'group toggle' key.  There are also
    keys assigned to turn on/off the group functionality.
    
        * Replace

    Holding down 'Left Ctrl' while selecting a sequence will mute all
    other sequences and turn on the selected sequences.

        * Restore

    Holding 'Alt' will save the state of playing sequences and restore
    them when 'Alt' is lifted.

    Holding 'Left Ctrl' and 'Alt' at the same time will enable you to flip
    over to new sequences briefly and then flip right back upon lifting
    'Alt'.

        * Queue

    Holding 'Right Ctrl' will queue a on/off toggle for a sequence when
    the loop ends. Queue also works for mute/unmute patterns (groups), in
    this case every sequence will toggle its status after its individual
    loop end. 

        * keep queue

    Pressing the 'keep queue' key assigned in the .seq24rc file activates
    permanent queue mode until you use the temporary Queue function again
    pressing 'Right Ctrl'. 

---------

    Late to reply to this I know, but SEQ24 will do what you want. I am not
    at my music computer right now, but I think you do ALT click or CTRL
    click, and it puts your command in a buffer and will activate it at
    the end of the clip.  Hope that helps.

---------

Source-code investigations:

    mainwid:

        Muting status is tested by sequence::get_playing().  This value may
        also be stored in mainwid::m_last_playing[].  However, that member
        seems to be unused.  We are removing it.

        Queued status is tested by sequence::get_queued().

    mainwnd:

        Clicking the L button (a toggle) and pressing a mute-group key
        stores the current mute state (of the set OR the whole thing???) in
        that key.  This is passed to perform::learn_toggle().

    perform:

        If m_mode_group_learn, the L button calls unset_mode_group_learn(),
        otherwise, it calls set_mode_group_learn().

        int index = mute_group_offset(gtrack);

            Gets offset re m_mute_group_selected * c_seqs_in_set.

        set_group_mute_state (int gtrack, bool muted) (and get_....)

            Sets m_mute_group[index] = muted;
                   
        select_group_mute (int mutegroup)

            If in group-learn mode, sets the mute-group status of all
            sequences in that screen-set to their current playing status.

        m_playing_screen = m_screenset;
        m_playscreen_offset = m_playing_screen * m_seqs_in_set;
        m_mute_group[1024] contains the mutings for all mute groups.
        bool m_mode_group flag for memorizing?

Life-cycle:

    midifile (parse and write):

        c_mutegroups:

            for groupmute in 0..c_seqs_in_set
                select_group_mute(groupmute);
                for gmutestate in 0..c_seqs_in_set
                    set_group_mute_state(gmutestate != 0);

            Somehow can we make this optional in the file?

    optionsfile (parse and write):

        [mute-group]:

            Similar to midifile, reading the mute-group number and giving
            it to select_group_mute(), and then the 4 x 8 = 32 state values
            and giving them to set_group_mute_state() or getting them from
            get_group_mute_state().

        [midi-control]:

            Writes the value for gmute.

    mainwnd:

        L button --> learn_toggle()

        Key presses:

            if (perf().get_key_groups().count(ev->keyval) != 0)
            {
                perf().select_and_mute_group    /* activate mute group key  */
                (
                    perf().lookup_keygroup_group(ev->keyval)
                );
            }

            bool mgl = perf().is_learn_mode() && ev->keyval != (group_learn);

                Cancels learn mode, calls unset_mode_group_learn().

    perform:

        mainwnd_key_event():

        press:

        key == keys().queue() || key == keys().keep_queue()
            set_sequence_control_status(c_status_queue);

        key == keys().snapshot_1() || key == keys().snapshot_2()
            set_sequence_control_status(c_status_snapshot);

        key == keys().set_playing_screenset()
            set_playing_screenset();

        key == keys().group_on()
            set_mode_group_mute();

        key == keys().group_off()
            unset_mode_group_mute();

        key == keys().group_learn()
            set_mode_group_learn();

        release:

        key == keys().replace()
            unset_sequence_control_status(c_status_replace);

        key == keys().queue()
            unset_sequence_control_status(c_status_queue);

        key == keys().snapshot_1() || key == keys().snapshot_2()
            unset_sequence_control_status(c_status_snapshot);

        key == keys().group_learn()
            unset_mode_group_learn();
            
            bool m_mode_group
            bool m_mode_group_learn
            int m_mute_group_selected
            int m_screenset;
            int m_playing_screen;
            return m_mode_group_learn;

            void mute_group_tracks()
            void select_and_mute_group(int group)
            void set_mode_group_mute() and void unset_mode_group_mute()
            void select_group_mute(int mute)
            void set_mode_group_learn()
            void unset_mode_group_learn()
            bool is_group_learning() return m_mode_group_learn
            void set_and_copy_mute_group(int group)
            int mute_group_offset (int track)
    {
        return clamp_track(track) + m_mute_group_selected * c_seqs_in_set;
    }
        
         ------------------------------
        |   bool m_mute_group[1024]    |
         ------------------------------


         ------------------------------
        | bool m_tracks_mute_state[32] |
         ------------------------------

Flow diagrams:

 o  "rc" file --->
        [mute-group] --->
        select_group_mute(g) --->
        m_mute_group_selected = g (we are not in learn mode) --->
        set_group_mute_state(track, gm[track]) for 32 sets --->
        m_mute_group[mute_group_offset(track)] = muted;
                       |
                        ---> track + m_mute_group_selected * c_seqs_in_set;

    In the other direction, we write c_gmute_tracks (1024, replaced now by
    c_max_sequence), select_group_mute(g) for each of 32 groups, and
    write 32 get_group_mute_state(track) values for each group.

 o  MIDI file --->
        c_mutegroups --->
        length, must match c_gmute_tracks (now c_max_sequence) --->
        m_mute_group_selected = g (we are not in learn mode) --->
        set_group_mute_state(track, mute != 0)

    Q:  What happens if we turn on learn mode, then read a MIDI file
        containing a c_mutegroups section?  Does not look like learn-mode
        makes a difference in this case.

 o  L button --->
        perform::learn_toggle()

 o  mainwnd key "group_learn" in learn-mode --->
        
My Brief Examples:

    These examples assume the latest Sequencer64, with support for
    Auto-Shift (acting as if the Shift key was pressed, a form of
    Shift-Lock) in Group-Learn mode.  They also assume the nicer
    group-keys layout obtained by copying contrib/configs/sequenceer64.rc.keys
    to ~/.config/sequencer64/sequencer64.rc.

Simple:

    Load contrib/midi/b4uacuse-GM-format.midi.  Arm patterns 4 ("Vocal")
    and 5 ("Rhythm (Chord...").  Press the "L" button or press Ctrl-L.
    Then click the "1" key.  You should see a message to the effect of
    "MIDI mute group learn success:  Key 'exclam' (code = 33) successfully
    mapped."

    Exit Sequencer64 to save the configuration.  Open the rewritten
    ~/.config/sequencer64/sequencer64.rc file.  Note the following values:

    [mute-group]

    1024    # group mute value count (0 or 1024)
    0 [0 0 0 0 1 1 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0] [0 0 0 0 0 0 0 0]
               ^ ^
               | |
               |  ------- pattern 5
                --------- pattern 4

    Now, if one does not save contrib/midi/b4uacuse-GM-format.midi, when
    it is loaded again, these settings are lost.  To keep them for that
    song, save the song before exiting.

    Loading the song again, the pressing Shift-1 ("!") will turn on those
    sequences.  Pressing another one (e.g. Shift-Q) will turn them off.

Horse:

    Load horse.midi (the short version, stripped of mute groups).
    Unmute all patterns in set 0, press "L", and press "1".
    Unmute all patterns in set 1, press "L", and press "q".
    Now Shift-1 will turn on the same current *relative* set of patterns,
    affecting set 0 if selected or set 1 if selected.
    Same for Shift-q.
    Shift-w will turn off the current set no matter which is selected.

    Therefore, the mute-groups operate on whatever is the current set in
    view.  And turns off the other set that was "active" due to the mute
    group setting.

    So, if mute-group "!" is applied on set 0, it turns on the patterns in
    set 0.  Then if applied to set 1, it turns off the patterns in set 0
    and turns on the similar group of patterns in set 1.

    So a mute-group is not associate with a particular set, though it can
    turn off other sets.


# vim: sw=4 ts=4 wm=8 et ft=sh
