Quick Reference for Git Processes on GitHub
Chris Ahlstrom
2015-09-09 to 2016-02-07

Creating a GitHub Repository:

First, I like to create the project on my computer.  Once the files
are in place, run the following commands in the top directory of the
project:

    $ git init
    $ git add .
    $ git commit -m "Created this new and wonderful project."

In GitHub, create the new repository (without the LICENSE and README
files, which you can create locally).  Then copy the repository URL to the
system clipboard.  We will call it $MY_GITHUB_URL.  Add the remote
URL, verify it, and push your local repository to it.

    $ git remote add origin $MY_GITHUB_URL
    $ git remote -v
    $ git push -u origin master

Now you are ready to work, making changes locally and pushing them to
GitHub.

Repository Management:

   https://github.com/Kunena/Kunena-Forum/wiki/
      Create-a-new-branch-with-git-and-manage-branches and others

In a github fork, keep the master branch clean (no changes pending).
Then you can create a branch from your master. Each time you want to
commit a bug or a feature, create a branch for it, which is a copy of your
master branch.

When you do a pull request on a branch, you can continue to work on another
branch and make another pull request on this other branch.

Create the branch on your local machine and switch to it:

    $ git checkout -b [name_of_your_new_branch]

When the branch is ready, push the branch to github:

    $ git push origin [name_of_your_new_branch]

Better, to make sure git pull will work, set an upstream branch:

    $ git push -u origin [name_of_your_new_branch]

When you want to commit something in your branch, be sure to first
checkout the branch.

If git claims you cannot check out a branch, just do the following command
to tell your local git about any new branches:

    $ git fetch

Update your branch when the original branch from official repository has been
updated:

    $ git fetch [name_of_your_remote]

Others can track your branch in this manner to simplify the git push
command:

    $ git checkout --track -b your_branch origin/your_branch
    $ git commit ...
    $ git push

Then you need to apply to merge changes, if your branch is derivated from
develop you need to do:u

    $ git checkout master
    $ git merge [name_of_your_remote]/develop

If you set up an upstream branch, then this will suffice: 

    $ git checkout master
    $ git merge develop
   
Then make any minor tweaks or version stamping you need to make your
master official.  Also, it is beneficial to tag the release (as discussed
below) to make it easier for users to determine the differences between
major/minor releases, without having to study a bunch of intermediate
commits.

You will probably also want to merge back any tweaks made to master back
into your branch, if you intend to do further work in that branch:

    $ git checkout develop
    $ get merge master
    $ git push origin develop

Delete a branch on your local filesystem, use -d or -D (to force):

    $ git branch -d [name_of_your_new_branch]

Delete the branch on github:

    $ git push origin :[name_of_your_new_branch]

Caching your credentials (be careful!):

    $ git config credential.helper store

Pulls and merges:

    Step 1: From your project repository, check out a new branch and test
            the changes.

    $ git checkout -b TDeagan-mute_groups master
    $ git pull https://github.com/TDeagan/sequencer64.git mute_groups

    Step 2: Merge the changes and update on GitHub.

    $ git checkout master
    $ git merge --no-ff TDeagan-mute_groups
    $ git push origin master

Tagging:

    We want to tag release points (currently 0.9.9.xx) with a tag of the
    same name.  We create an annotated tag, which adds information and
    requires a commit message, and is meant for public consumption.

    $ git log               [to get the commit hash, abcd1234 (fake example)]
    $ git tag -a 0.9.9.xx -m "New version 0.9.9.xx tagged" abcd1234
    $ git push origin 0.9.9.xx              - or -
    $ git push origin --tags

    Note that each tag to be published needs to be pushed as well.
    A user can get the tagged code via a command like the following.

    $ git checkout -b version.xx 0.9.9.xx

    But be careful about modifications; if committed, they represent new
    work you might need to merge later, but the new work will not be part
    of the tagged commit.

    To show all of the tags present in the project, along with the commit
    numbers for the tag and the tag operation:

    $ git show-ref --tags -d

# vim: sw=4 ts=4 wm=8 et ft=sh
