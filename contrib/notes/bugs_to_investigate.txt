Bugs and Additional Upgrade Ideas
Chris Ahlstrom
2015-10-27 to 2016-10-23 (New bugs and fixed bugs)

In no particular order...  "y" means "in progress", and "x" means it is
basically done.

-  Also see BUG REPORTS below.  Those are bug reports from other people.
y  Issue 48: JACK non-master doesn't play when built without seq32 code.
   x Fixed by a simple change in jack_assistant.cpp.
   y Why does Sequencer64 save the JACK Master option even when exiting
     with it disabled?  There was a bug, and something happened to cut off the
     mute-group section at entry 30, and the rest of the file was not written.
   - As Master (without seq32 code), it always resets to a non-zero
     position as seen in the main window.
   - Would be good to have an icon or status text in the main window for:
     "ALSA", "JACK", "Master".
x  Probably need to make play-toggle button useable only during Live mode.
x  Consider adding --version output to Help/About.
x  If a non-active sequence is attempted to be painted in the perfroll,
   painting is disable for the duration of the Sequencer64 run.
-  The perfedit L/R setting:
   x Is not respected in looping fully.
   y The mainwnd Pause button is not working in loop mode.  The Pause
     key (.) does work, though.
   y In perfedit, the Pause key (.) causes a complete rewind, then
	 enters the L/R loop fine.
   x More interactions?  This all is with Seq32 JACK and Transport support
     built in.  It is even worse with them disabled!
x  The Song/Live button does not seem to work if Seq32 transport is not
   compiled in.  The button now works, but perf mode doesn't override
   the Live button the way it should when the Song Editor has focus.
x  A single Z (zoom in) in seqroll makes the END marker drawn in the wrong
   place (in b4uacuse-GM-format.midi).  Actually, it is correct for the
   sequence, but paging to the end shows seqtime and seqroll measure markers
   out of sync.  Seems to be fixed by using Stazed/Seq32 code, though user
   layk found that zoom > 32 would cause an exception.
-  We need to figure out if we want the sequence length to reflect
   the actual length of long sequences, or the last measure, like it does for
   short sequences.
x  Need an alternate icon for the transposable button in seqedit.  Done, see
   drum.xpm.
-  Things to fix while getting the stazed/seq32 JACK support working:
   - Make the perfedit JACK icon work like setting File / Options /
     JACK Transport plus JACK Connect options.
   - Make the perfedit JACK icon look less phallic.   :-D
   - Add this icon and functionality to the main window.
   - Make Pause functionality work properly in ALSA and JACK mode when
     SEQ64_STAZED_JACK_SUPPORT is active.
   - Make JACK functionality work properly when JACK Master is *not* selected,
     when SEQ64_STAZED_JACK_SUPPORT is *not* active.
-  Is it worthwhile to save lyric events within a sequence and restoring them
   upon writing the file (while filtering out 0-length lyrics)?
x  Saving of a track of a stripped-down example1.mid with the notes shortened
   in the event editor, puts them back to ending in the second measure when
   "Save to Sequence" is pressed.  Actually, it is not saving the events
   because of a discrepancy in event count; we were calling a simple container
   add() instead of the full eventslots::insert_event() function.  Doh!
x  Export works, but the song does not play properly.  It turns out that
   earlier saves of files were writing tempo events of value "0", which
   was causing the issues with exported files playback.
y  Use the event_list::dref() function to access events.  Check all remaining
   usage of SEQ64_USE_EVENT_MAP
x  Still need to test saving and reading of the new transposable sequence
   state.
x  Add undo/redo button sensitivity setting to seqedit as already done in
   perfedit.
-  Need to remove using Ctrl-key as a way to open a pattern for editing.
y  TODO:  Fold mark_selected() and push_undo() into the various functions
   they wrap so that the caller code can be streamlined.
x  Forgot to add the 15 bytes of the time-signature and temp values
   to the size of the first MTrk.  Thanks, Stazed!
y  Added ability to strip out mute-groups from a MIDI file when not being
   used.  Still testing
y  The "replace" key functionality (turn on the selected pattern and turn off
   all others) is broken.  Basically fixed when using the Control keys.  Other
   keys (e.g. keypad keys) behave slightly differently.
-  If building with chord support is active, then the movement of the
   selection box by the arrow keys is more flickery.  Seems to depend upon
   context.
-  Check this URL out re MIDI input enabling/disabling, and a Seq24 defect
   where it does not filter incoming MIDI by channel:
   http://ubuntuforums.org/archive/index.php/t-1674890.html
-  Can we add a button to reset all outputs on all active busses and channels?
-  Modify-flag improvements:
   x  Make the perform pointer a member of sequence regardless of the status
      of the "use pause" macro.
   y  Move the calls to perform::modify() from the GUI code to the
      relevant sequence member functions.
   -  Test heavily.
-  To investigate:
   x  sequence::move_selected_notes() looks like it can treat non-note
      events like notes.  It also mismanaged the timestamp adjustments
      of non-note events.
   x  sequence::paste_selected() also transposes non-note data.
   x  sequence::grow_selected() removes non-note events (when the user
      selects all and does ctrl-left-drag).
y  Load the very simple test.midi file.  Open the pattern editor. Select the
   left note.  Ctrl-Select the right note.  Note the drawing artifacts.
   See the extra events *created*, at the bottom of this file!  Still needs
   more testing.
-  Event Editor bugs:
   y  Saving a pattern in the event editor does not cause a performance
      modification!
   x  Trying to insert a "Pitch Wheel" event in the event editor inserts a note
      event instead.  Seems to be a side-effect of earlier bugs, now fixed.
   x  Saving a time-modified "Pitch Wheel" event leaves the event unmodified.
      Seems to be a side-effect of earlier bugs, now fixed.
   -  Need case-insensitive abbreviations for inserting events:
      CC (Control Change), PC (Program Change), ON (Note On), OFF (Note Off),
      AT (Aftertouch), ...
   -  How do we provide the channel value for an inserted event?
-  Grow using a ctrl-arrow key can fail in odd ways.
y  Copying and pasting notes ruins the original notes. Orel found a solution,
   but it needs more testing, which has already found the two bugs listed
   above.
y  In Sequencer64 and Seq24, select a couple events in the event row of the
   seqedit dialog, and then move them a little to the right... the events end
   up greatly elongated in the seqroll section.  This really is not a bug,
   but shows that the user can move Note On events past the original Note Off
   events.  For now, we gray the event panel for these events just as a
   warning to the user.
y  Select all of the notes in allofarow.mid, Ctrl-C, Ctrl-V, and left-click.
   The notes overlay the original notes, instead of being where one dropped
   them.  Turns out to be a long-standing bug in sequence::paste_selected(),
   which had an algorithm for finding the highest note in the selection
   that worked only if the first selected event was a note event.  Still needs
   more testing.
-  Not necessarily a bug, but Enter remembers the previous copies and
   pastes them.
x  Had the seqkey numbering (accessed by right-click) backwards.  What
   an idiot!
x  Deleting last note of Ionian MIDI import in event editor causes a CRASH!
   Fixed, but will still try more edits though.
y  Aftertouch events are not transposed.  Are they also selectable?
x  allofarow.mid:
   x    Load the allofarow.mid tune while in JACK mode.  It loads as 140 BPM,
        but plays really slowly!
   x    In ALSA mode, it loads as 140 BPM, but plays normally.
   x    In seq24, it loads as 120 BPM, but plays somewhat normally (just a tad
        slow).
   x    Saving it in Sequencer64 format and reload it, it plays fine in JACK
        mode, live or song mode.  Comes up as BPM = 140, too.
   The problem was an actual bug in reading and translating the time signature
   in this file.  We had it as 2/16, and it was actually 4/4!  It is somewhat
   hidden because Sequencer64/Seq24 has another MIDI construct that works
   correctly to get the time signature.
y  It seems like note-off is not working when the song is stopped or paused
   now.  This is fixed for ALSA, but not for JACK.
-  Can we make the drawing Color objects static, to save some space?
-  It would be good to have a command that dumps the current build settings
   for Sequencer64.  Actually, add it to the --version command.
-  When we set the beat-width high (e.g. 16 or 32) in perfedit, we need to
   either increase the zoom or change how the time grid drawing works.
   (The seqroll class handles the grid drawing well.)
-  When the sequence numbers reach 4 digits, they make the slot labelling
   crammed up and ugly.
-  When exiting a single pattern editor, the current-edit highlight does NOT
   go away, unless exited via Alt-X (system exit-app keystroke).
y  Keystroke editing of pattern (bringing up the pattern editor) works, but
   only for the first screenset.  Added usage of the screenset number in
   mainwnd/seqmenu, but only for the new '=' key.  Also should add the '='
   keystroke to the options dialog.  Also want the '-' key for bringing up the
   event editor.
x  Screen-sets > 0 would not show the shortcut mute/unmute keys, even though
   the keys would work.
y  Pause Support:
   y    ALSA: Live Mode supports resume-from-pause, Song Mode does not.
        Is this a BUG, or a FEATURE?  Now fixed, but need an option for it or
        some heavy testing.
   y    Currently, stop (Escape) in seqroll makes the cursor disappear, and
        then playback resumes from pause.  The cursor rewinds, but then
        reappears as if a pause was performed.
   x    In the main window, the pause/play button works, but the space bar
        plays only a tiny bit each time it is pressed.  This is triggered
        by hitting the play/pause button; but it does not happen for the real
        pause key (the period).  This bug occurs if configured with
        --disable-pause, and also occurs in seq24!  FIXED.  It turns out that
        the buttons in the main windows would grab the focus when clicked, so
        that the space bar would not only do its normal function, but also
        click the button!  Had to call a function to turn off the ability of a
        number of the buttons to grab focus.
   x    Seems to be susceptible to notes not being turned off
        (but check the MIDI bus flush as well).  We need to make sure that
        stop and pause both silence all notes, somehow.
   x    It also seems to disable start-stop from Seq64 in JACK mode.
        This is also true in the latest code even if PAUSE SUPPORT is
        OFF.
   y    If start key == stop key, they become stop/pause.  Allow
        Esc to automatically be stop (not pause), then.
   -    In playing in Song Mode in ALSA, the pause button seems to work, but the
        period key does not.
x  The pattern editor ends up zipping to the end of the pattern
   after a few start/stops, in JACK mode only.  Fixed by rewinding
   in qjackctl; seems to start when using space-bar toggle in perfedit.
   Accompanied by a glitch in transport, jumping a few bars.
   Actually seems to happen at the beginning of the triggers at the
   performance gap (in the b4uacuse alternate tune).  This bug goes
   back to at least 0.9.9.18, i.e. before the PAUSE SUPPORT.  Fixed by
   not calling set_running() if JACK is active.
x  Shift Click:
   x    Make it toggle muting of all the other patterns in the patterns
        window, the same way it does it in the perfnames window.
   x    Also see if feasible to show mute status that mirror each other.
-  If a MIDI buss override number is provided, it is not applied to a new
   sequence.  Is this a bug or a feature?
x  The GUI now comes up not showing the "pill" progress bar until the tune
   starts. Fixed, was a comparison error in maintime::idle_progress().
y  Get variable PPQN support fully working.
-  Support for the Non Session Manager.
-  Support for automation via scripting.
-  Support for automation via OSC.
-  Write up a procedure for using nsm-proxy as Daniel Appelt notes.
-  Add JACK-fuzzing code feature for testing and stressing JACK transport and
   other JACK transport clients.
-  The vertical scroll feature in seqdata immediately puts the data value at
   0, but otherwise works fine, adjusting it up and down properly.
-  Make sure that Sequencer64 handles running status, via the files that
   midicvt discusses.
-  We need to be able to empty out any sequences and close any editors
   when loading a new file, otherwise Sequencer64 can freeze.  In generally,
   we need to *manage* the various editing windows better.
-  In the pattern editor piano roll, implement Undo for the arrow keys in the
   same way as for the mouse.
-  The "increase size of grid" button on the perfedit doesn't work, or at least
   doesn't show any visual feedback.
-  Is the --pass-sysex command actually supported?  Seq24 threw SysEx away.
y  Tighten up the is-dirty handling for all dialogs:
   y  Can the perform object control all the is-dirty stuff?  All the GUIs use
      it!
   -  Just selecting some notes should not dirty the song.
   -  Just entering draw mode in the performance editor should not
      dirty the song.
   -  Modifications in the performance editor should dirty the song.
      x  Moving a segment, whether by arrows or mouse.
      x  Adding a segment, whether by keys or mouse.
      x  Deleting a segment, whether by keys or mouse.
-  Implement, if possible, the "p/x" keys in the seqevent area.
-  Just noticed that snap is saved.  Where?  Is this a bug or a feature?
-  When closing a file, either need to blank out or close any pattern-editor
   windows and the performance editor; something like that.
-  Document that right-click on the pattern editor left and right scrollbar
   arrows act like Home and End for the seqroll.
-  Better progress and status indicators:
   -  Show the following items in the sequence editor:
      -  The sequence number.
      -  The current "time" of the progress bar.
   -  Show the following items in the song editor:
      -  The current "time" of the "L" marker.
      -  The current "time" of the "R" marker.
   -  Would be nice to have the performance editor scroll to keep the
      progress bar in view.  Already done for sequence editor.
   -  Would be nice to show the current note/time/tick/measure/bar in all of
      the windows.
y  Would be nice to have a PAUSE button and PAUSE feature.
-  Seq24/Sequencer64 do not write out the c_midictrl data for any sequences.
   Something to learn more about and fix.
-  Add optimization to write out minimal qmute etc. to the MIDI file when it is
   not being used.
-  Add swing-quantization to the seqedit menu.
-  Would be nice to be able to Ctrl-Home, Ctrl-End, Page Up, and Page Down
   in the Song Editor.
-  We now have the same file imported twice, into screen-set 1 and screen-set
   2.  Now can we have --bus n do n and n+1 (each next screen-set goes to the
   next buss?
-  Sometimes the editing of event values in the event data section
   will not work. The workaround is to do a Ctrl-A, and the click in
   the roll to deselect the selection; that makes the event value
   editing work again.
-  The pattern right-click Cut menu entry does not seem to work.
   The loop or pattern remains in place.  Is this actually meant to
   cut selected events?
-  While one is typing in the name of the set in this field, the
   keystrokes will affect the panel window, causing playback to
   start and pattern boxes to be toggled!
-  While one is typing in the number of the set in the Set number field,
   the keystrokes will affect the panel window, causing playback to
   start and pattern boxes to be toggled!
-  Right click to edit a new sequence automatically shows it in perfnames,
   but not in mainwid.
-  Should mark empty tracks in the background-sequence selector, or just not
   show them.
-  For a time signature of 7/4 and a length of 8 bars, that 7/8:8 sequence,
   when draw-clicked into the song editor, takes up 14 measures, until the
   song editor is also set to 7/4.
-  Create a long note and a short note.  Select the shorter note so it is
   orange.  Drag it over to the middle of the longer note.  Orange will
   cover the length of the short note, plus bleed over to the right to the end
   of the longer note.  Other minor issues with overlapping notes.
   Can get notes chopped and resized!
-  Could use a small view of a sequence, or at least the overall song,
   to see where you are in it.
-  Sometimes the editing of event values in the event data section
   will not work. The workaround is to do a Ctrl-A, and the click in
   the roll to deselect the selection; that makes the event value
   editing work again.
-  The pattern right-click Cut menu entry does not seem to work.
   The loop or pattern remains in place.  Is this actually meant to
   cut selected events?
-  While one is typing in the name of the set in this field, the
   keystrokes will affect the panel window, causing playback to
   start and pattern boxes to be toggled!
-  While one is typing in the number of the set in the Set number field,
   the keystrokes will affect the panel window, causing playback to
   start and pattern boxes to be toggled!
-  In midibus, make the buss name variable, instead of hard-wired to "seq24".
   It should be an optional command-line option, and default to "Seq64".
   And in the same module, function init_in() should use it as well.
   Like legacy mode, using a link named "seq24" to run the app should
   also change this name to seq24, as should --legacy itself!
   Also init_in_sub().
-  --manual-alsa-ports on the command line does NOT override the "rc"
   configuration file setting!
-  Can we provide a way to move a note a tiny amount without changing the beat
   size?
-  Ctrl-Z for data/event does n0t work unless the piano roll has the focus.
   Worth worrying about?
-  If POSSIBLE, avoid loading the "user" configuration file, or at least
   parts of it, when "manual-alsa-ports" is set to "1".
   -  ACTUALLY, THIS SEEMS TO BE WORKING PARTLY: the right busses are shown,
      but the sequencer64.usr file controllers and channels are still shown.
   -  Also what happens is that, if manual-alsa-ports is false, and the "user"
      file has entries, but fewer entries than what the system provides by
      default, then the additional system entries are visible.  NOT SURE IF
      THIS IS A BUG, A FEATURE, or A WARNING TO THE USER.
-  WEIRD!  Opening the File / Options / MIDI Input tab with "manual alsa"
   set to true, the port shown is "[1] seq24 1", not the  "[0] seq24 0"
   that I expected.  However, check this out:
      % arecordmidi -l
       Port    Client name                      Port name
       14:0    Midi Through                     Midi Through Port-0
      129:0    seq24                            [1] seq24 1
      129:1    seq24                            [2] seq24 2
      129:2    seq24                            [3] seq24 3
       ...      ...                                 ...
      129:15   seq24                            [16] seq24 16
-  Provide an "infinite" pattern that will not repeat (unless specified
   multiple times in the performance editor).
   "Infinite" sequences, aka a "track" as opposed to a sequence.
   Or, perhaps the track can be set to any length (add 128 and 256
   to the list???), but be marked as a one-shot timer, set to inactive
   once it is done, never to sound again until the next playback.
-  Muting in mainwid or perfnames should be reflected in both views.
-  Extra lines appearing in perfnames/perfroll when starting playback in
   perfroll.
-  The 750 x 500 for sequence and song editor size should be configurable in
   the "user" file.
-  Would be nice if ctrl-arrow or some other key could shorten or lengthen the
   note by very small increments.
-  Would be nice if shift-left-click would deselect only the one note clicked
   on.
-  Update maintime to support use of the the current beat-width, instead of
   using 4 all the time.
-  Selecting some notes of the same value, and trying to elongate or shrink
   them can make a note of "infinite" length.
y  Offload the scale functionality to a new "scale" class.
-  Still need to figure out what left, right, and home do
   otherwise, needs some graphical feedback.
y  Initiatives from other projects ("-" means "not done (yet)", "y" means
   "partially done", "x" means done, "0" means "will not do"):
   0  Porting to BSD:         https://github.com/vext01/seq24
         Obviously a very old fork of seq24, with a lot of diffs from 0.9.2.
   y  AUR archive files:      https://github.com/aur-archive/seq24
   0  Launchpad mapper:       https://github.com/Excds/seq24-launchpad-mapper
   0  Fork of seq24:          https://github.com/orlammd/SC_seq24
         An apparent odd mix of versions, and some French cusses.
   0  git-ingore, license:    https://github.com/franticspider/seq24plus
   0  Basic inspiration:      https://github.com/analoq/seq
   0  In-browser seq24:       https://github.com/briandunn/seq25
   0  One-up of seq25:        https://github.com/jgdavey/seq26
   0  Ruby implementation:    https://github.com/chriserin/seq27
   0  Song-editing emph:      https://github.com/sbrauer/seq42
         Another old fork, lacking mainwid and perfedit, but has a couple of
         nice ideas to examine.

BUG REPORTS:

Extant GitHub Issues:

    A fair number of these are actually fixed (*) or closed (C), in the fixups
    branch.

     #1: [feature request] NSM support.
     #2: Install-recursive and .seq24rc equivalent
     #4: [feature request] Would like unique set of mute groups per screen
         (1024 instead of 32)
C    #5: Mute Groups should be applied to active screen
C   #12: Add a git tag for each new version
    #14: [feature request] Plugin version
    #16: [feature request] script language
C   #18: Last Edited highlight disables On/Off highlight
C   #20: Loops not playing when using jack
C   #28: Zooming sequencer edit window more than 1:32 kills the program.
C   #31: SegFault in Event Editor → "Modify Event"
    #34: [feature request] Tempo Track?
    #36: stop playback and jack transport
    #38: Small quirks in event editor
C   #40: cut and paste in sequence editor does not work.
    #41: Sometimes "play cursor" shows wrong position in main window
C   #42: Recording midi note is fixed length due to missing handling of
         is_pattern_playing(bool) in perform.cpp
C   #43: Upper case midi file extension filtering when opening file
    #45: [feature request] JACK MIDI support
C   #46: Undo(ctrl-z) removes two instanses of history via
         seqedit::on_key_press_event()

Postings About Issues:

Date: Sat, 19 Dec 2015 20:48:34 -0800
From: Tim Deagan <notifications@github.com>

In any event, after some code surfing and debugging, it looks like a lot of
the odd behavior I experience with mute groups is possibly because of the
line: if ((i == m_playing_screen) && m_tracks_mute_state[j])
in perform::mute_group_tracks () isn't working as I imagined it should.

Gdb tells me that m_playing_screen never changes from 0 regardless of the
m_screenset value.  I believe this is why, no matter what screen you're on
when you hit a mute group key, it ignores that screen and applies the mute
group to the first screen.

I will try i == m_screenset as an alternative sometime in the next few days.
I just wanted to let you know I was still thinking about this.

    FIXED

Date: Tue, 19 Jan 2016 14:47:50 -0800
From: Daniel Appelt <notifications@github.com>

This report might be seen as a follow up to #8 I am trying to use sequencer64 as
transport master for jack under Arch Linux When I hit play in sequencer64, the
playroll visualization in the top right corner of the main window is jumping
around very wildly

In seq24, jack transport synchronization worked better (mostly) Seq24 does not
send correct Midi clock signals though

    FIXED

Date: Tue, 02 Feb 2016 15:22:42 -0800
From: Daniel Appelt <notifications@github.com>

With the current release 09915, Midi realtime clock messages are broken again
when connected to jack Currently, it seems that if sequencer64 is transport
master, the realtime clock messages indicate a much slower tempo than set in
sequencer64 If sequencer64 is jack transport "slave", the realtime clock
messages seem to indicate a much faster tempo

    FIXED

Date: Thu, 04 Feb 2016 14:39:35 -0800
From: Daniel Appelt <notifications@github.com>

I am using [GMIDImonitor](http://home.gna.org/gmidimonitor/) which is a very
basic monitoring tool together with qjackctl. GMIDImonitor needs to be started
with option `--alsa` for it to work with ALSA midi ports.

qjackctl is used to create ALSA midi connections and to test jack slave mode
in sequencer64.  For my tests I  use an ALSA "Midi Through Port" whose output
is patched to GMIDImonitor. Furthermore, you need to create a pattern in
sequencer64 containing only quarter  notes.

The output that is to be expected is that you will see 24 "MIDI Real Time
Clock"  messages in between two adjacent quarter notes. Unfortunately, right
now I am not seeing any notes at all being sent from sequencer64 - I am using
the commit that I mentioned earlier.

    FIXED

Date: Sun, 07 Feb 2016 16:04:09 -0800
From: Daniel Appelt <notifications@github.com>

There is only one thing left. If you stop the transport (sequencer64 is
transport master), and you use qjackctl or the carla / catia transport
functions to roll back transport to the beginning, and then start play back
again from one of those tools, the BPM information seems to be gone. The
behaviour is the same when using either qjackctl or carla or catia. For
example, BPM in qjackctl is then set to "6.953e-310", in catia it is displayed
as "0" after rolling back.

    FIXED.

Date: Tue, 19 Jan 2016

`klick -j -P`

where -j means "follow jack transport BBT info (no tempo map)". This indeed
leads to the correct result with respect to the metronome!  So, for now, this
just leaves me with two issues when using the jack transport master option:

    - Midi clock signals seem to be wrong
    - visualisations are jumpy

    FIXED.

Date: Fri, 29 Jan 2016

% midicvt hymne-seq64.midi hymne-seq64.asc
% ? Error at MIDI file offset 12155 [0x2f7b]
% Error: Garbage at end 'readtrack(): unexpected running status'

% midicvt hymne-ppqn-384.mid hymne-ppqn-384.asc
? Error at MIDI file offset 12488 [0x30c8]
Error: Garbage at end 'readtrack(): unexpected running status'

This means Sequencer64 is doing something wrong is saving hymne.mid when
PPQN == 384.  Other issues, too.

The error occurs near the end of the converted file, where the new SeqSpecs
for Key, Scale, and Background Sequence start.  It appears to be caused by a
bad length value following the c_mutegroups = 0x24240009 specification.

    gmutesz = 4228, adding 4 for data = 4232 (is this correct?), but
    the sequence of bytes sequencer64 (and seq24) yield is

        24 24 00 09 00 00 04 00 ... 00 with occasional nonzeroes

    write_prop_header(c_bpmtag, 07), 4:  len = 4+4 = 8, write
    00 FF 7F 08

    write_long(80): <todo>

    write_prop_header(c_mutegroups, 4228): len = 4228+4 = 4232, write
    00 FF 7F A1 08 24 24 00 09
                    ^
                    |__ 0x1ef3, ends at 2f7b

    This translates to 2f7a - 1ef3 + 1 = 1088 bytes, or 4232 bytes.

    This is then followed with 00 FF 7F 05 24 24 00 11 00 and 00 FF 7F....

    Could this be a bug in midicvt?

    WORK SUSPENDED FOR NOW.

Note that we added time-signature and tempo support, but have not fixed the
garbage that appears via midicvt.

Date: Tue, 02 Feb 2016 15:32:40 -0800
From: Daniel Appelt <notifications@github.com>

Manual NSM support may be achieved using the nsm-proxy helper client. sequencer64
and seq24 both support signals SIGUSR1 (saving) and SIGINT (closing). You just
have to provide an initial Midi file to work on in the directory created for the
proxy, and specify its file name as command line argument.

There is even a helper script to support this scenario in
[github](https://github.com/rhetr/nsm-scripts/blob/master/scripts/seq24-nsm).
Please note that this script expects to find an (empty) Midi file in
`~/.local/share/seq24/blank.midi`.

	TODO!

fixups % ./Sequencer64/sequencer64 -J
[Reading user configuration /home/ahlstrom/.config/sequencer64/sequencer64.usr]
[Reading rc configuration /home/ahlstrom/.config/sequencer64/sequencer64.rc]
[JACK server already started]
[JACK transport master]
[JACK sync now enabled]

(sequencer64:2681): Gtk-CRITICAL **: IA__gtk_toggle_button_get_active: assertion 'GTK_IS_TOGGLE_BUTTON (toggle_button)' failed
[JACK sync already enabled!]

Ctrl-select bug:

   Initial notes:

   1:1:000 On  57
   1:1:040 Off 57

   1:4:144 On  54
   1:4:190 Off 54

   After selection:

   1:1:000 On  57
   1:1:046 Off 57
   1:1:046 Off 57

   1:4:144 On  54
   1:4:190 Off 54
   1:4:190 Off 54

Date: Sat, 19 Mar 2016 13:55:24 -0500
From: Stan Preston <sspresto10@hotmail.com>
Subject: sequencer64

Hello Chris,

It seems that seq24 has become very popular lately!

FYI, last November I began reviving seq42, the fork of seq24 that began in
2010 by Sam Brauer.

https://github.com/Stazed/seq42

In working with the program I noticed some bugs, some of which were imported
from seq24 and still existed in the current version.  I also got carried away
and started adding some enhancements to seq24 that I found useful. To get to
the point... this happened :)

https://github.com/Stazed/seq24

There are many enhancements, bug fixes, some refactoring etc.  I tried to keep
the original design purpose of simplicity as well as live performance in mind
when making the changes.
Of special interest:
- fixed jack master to work, it now loops and starts on left frame
- from the seq24 TODO, added note listen on paint and move notes in the
seqroll                                                                           - refactored the menu so it will not conflict with the live keybinding - added
off button!

There are many other items, see the changelog, commits.

About a week ago I came across your sequencer64 project and was very impressed
and humbled!
I confess that I have already used some of your code...

I wanted to let you know in case any of my stuff could be of help to you since
your project has already been of help to me.

FYI, I have no formal training in programming, just a part time hobby that I
picked up recently from taking some online tutorials. In part, my work on
seq42/seq24 was a learning experience and also served to make the projects
more useful to me.

Thank you again for the work on sequencer64, the documentation is very
helpful.

Emulation is the sincerest form of flattery!

Stan (AKA Stazed)

Date: Sat, 9 Jul 2016 07:59:41 -0400
From: Ken Long <kelargo1000@gmail.com>
Subject: Re: sequencer64 - connecting to jack. ?

Ill try that.  I like testing the code.. I'm not familiar with using this
application.

On Jul 9, 2016 7:42 AM, "Chris Ahlstrom" wrote:

> Well, it looks like I screwed things up royally with a new feature to strip
> out unused mute groups.  So I commented out that bad code, rebuilt, and
> things seem to work again.  I think the new "feature" was messing up the
> reading of the "[midi-clock]" section.
>
> You will have to "git pull origin fixups" again and rebuild.
> Also, you will have to open the contrib/configs/sequencer64.rc.example file
> and copy lines 97 to 132 (the whole [mute-group] section) back into
> your ~/.config/sequencer64/sequencer64.rc file following the
> "[midi-control]" section.
>
> Let me know if that cures your ills.  Sorry about that!  That'll teach me
> to
> commit untest code!  And making the poor user the guinea pig!
>
> Chris
>
> -------- Ken Long 23:29 Fri 08 Jul      --------
>
> hi,  here's what I see today... I think I compiled it with the correct          >> fixup applied?
>>
>> this error below (snd_seq_unsubscribe_port).. appears when I go into
>> Sequencer64 -> option -> midi tab.  and check / uncheck the name.. for me,
>> I see "[1]sequencer64 1"  doesn't seem to matter whether I use "-j" or
>> "-J"
>> not sure if I'm doing things correctly?
>> jack is running first.. and the "-m" option makes it appear in qtjackctl.
>>
>> regards
>>
>>
>> papa@papa-Latitude-E6420:~/Sequencer64/sequencer64-20160708/Sequencer64$
>> ./sequencer64 -m -U1 -j
>> [Reading rc configuration /home/papa/.config/sequencer64/sequencer64.rc]
>> [Reading user configuration
>> /home/papa/.config/sequencer64/sequencer64.usr]
>> snd_seq_connect_from(-1:-1) error
>> [JACK server already started]
>> [sequencer64:1]
>> [JACK transport master]
>> [JACK sync now enabled]
>> snd_seq_unsubscribe_port(-1:-1) error
>> snd_seq_connect_from(-1:-1) error

Date: Sun, 14 Aug 2016 14:48:31 -0700
From: Arnaud Jacquemin <notifications@github.com>
Subject: Re: [ahlstromcj/sequencer64] Loops not playing when using jack (#20)

Hello everybody,

I think I have the same issue if I only check "JACK Transport" in the _Options_ >
_JACK/LASH tab_. When I press _Play_, the playback cursor stays stuck, and no note
is played. Nothing moves, the window stays still like on this screenshot:
![sequencer64-transport-bug](https://cloud.githubusercontent.com/assets/1387489/17
652230/635e08ec-6277-11e6-81e1-d1d29d33f436.png)

If I check "_Transport Master_" or "_Master Conditional_" everything works  as
expected.

I use a recent version, compiled straight from the master branch on github :
"Sequencer64 0.9.16  2016-07-14 0.9.16-0-g0193728 * master". My OS is KXStudio
14.04.5 with jackd 1.9.11

(English is not my mother tongue, please excuse any errors on my part... I hope
I'm clear enough.)

By the way, thank you Chris for your work! It's my first day playing with
Sequencer64 and I'm having fun already!

Have a nice day

Date: Tue, 23 Aug 2016 14:58:09 -0700
From: Arnaud Jacquemin <notifications@github.com>
Subject: Re: [ahlstromcj/sequencer64] Loops not playing when using jack (#20)

Hello Chris, thanks for you answer.
I confirm that there is a similar issue with seq24 0.9.3, when only "Jack
Transport" is checked.
If you need someone to test these changes, I would be happy to help.

Date: Tue, 23 Aug 2016 05:07:16 -0700
From: Arnaud Jacquemin <notifications@github.com>
Subject: Re: [ahlstromcj/sequencer64] Would like unique set of mute groups per
        screen (1024 instead of 32) (#4)

Hello Chris and Tim, thank you for your answers !

Chris, your "auto-queuing" feature is interesting, it could be useful in some
cases. But it should be optional, because some users would also want to "mix and
match" patterns from different screen sets, a bit like a techno DJ mix.

Tim, I'm sorry to read that you had such a bad experience with your Raspberry Pi,
and that you lost all your work...

So bad my C++ skills are almost nonexistent, I would really like to contribute to
the "32 mute-groups for each screen set" feature. I think it would be as good as
the "scene" concept in Ableton Live.

Date: Fri, 26 Aug 2016 15:12:30 -0700
From: Arnaud Jacquemin <notifications@github.com>
Subject: [ahlstromcj/sequencer64] MIDI controller toggles the wrong pattern (#23)

I've updated my  `~/.config/sequencer64/sequencer64.rc` file in order to control
the pattern toggling with a MIDI controller (Launchpad Mini).

Here's a except of my file:

```
[midi-control]

74      # MIDI controls count
0 [1 0 144   0   1 127] [0 0   0   0   0   0] [0 0   0   0   0   0]
1 [1 0 144   1   1 127] [0 0   0   0   0   0] [0 0   0   0   0   0]
2 [1 0 144   2   1 127] [0 0   0   0   0   0] [0 0   0   0   0   0]
3 [1 0 144   3   1 127] [0 0   0   0   0   0] [0 0   0   0   0   0]
4 [1 0 144   4   1 127] [0 0   0   0   0   0] [0 0   0   0   0   0]
5 [1 0 144   5   1 127] [0 0   0   0   0   0] [0 0   0   0   0   0]
6 [1 0 144   6   1 127] [0 0   0   0   0   0] [0 0   0   0   0   0]
7 [1 0 144   7   1 127] [0 0   0   0   0   0] [0 0   0   0   0   0]
8 [1 0 144   8   1 127] [0 0   0   0   0   0] [0 0   0   0   0   0]
9 [1 0 144   9   1 127] [0 0   0   0   0   0] [0 0   0   0   0   0]
```

I wanted each of my pad to toggle a different pattern, but every one toggles the
same pattern: the second one (numbered 1) of the current screen set.

The version I'm using is Sequencer64 0.9.16 2016-07-14 0.9.16-0-g0193728 * master
(compiled from the Github souces)

It works as intended with seq24 0.9.3 (to test I copied the RC file to
`~/.seq24.rc`), so it looks like it's a regression.

Date: Fri, 26 Aug 2016 15:31:48 -0700
From: Arnaud Jacquemin <notifications@github.com>
Subject: Re: [ahlstromcj/sequencer64] Enabled experimental screen-set code for
        testing, see USE_EXPERIMENTAL_CODE macro usage. (a9e14fe)

I think this change is the cause of #23:

`i+m_offset` is changed to `m_offset + 1`

So the variable `i` (number of the pattern to toggle) becomes a constant `1`

Date: Fri, 26 Aug 2016 16:21:40 -0700
From: Arnaud Jacquemin <notifications@github.com>
To: ahlstromcj/sequencer64 <sequencer64@noreply.github.com>
Subject: [ahlstromcj/sequencer64] Fix for issue #23 MIDI controller toggles the
        wrong pattern" (#24)

Fix for issue ahlstromcj/sequencer64#23

It was a regression introduced in commit a9e14fe5cfd8f03b65d2acb1b2710ed9e5637463
You can view, comment on, or merge this pull request online at:

  https://github.com/ahlstromcj/sequencer64/pull/24

-- File Changes --

    M libseq64/src/perform.cpp (2)

-- Patch Links --

https://github.com/ahlstromcj/sequencer64/pull/24.patch
https://github.com/ahlstromcj/sequencer64/pull/24.diff


DONE, merged into fixups as well.

Date: Mon, 12 Sep 2016 14:11:32 -0700
From: Arnaud Jacquemin <notifications@github.com>
Subject: Re: [ahlstromcj/sequencer64] Impossible to unmute patterns when JACK
        Transport is activated (#25)

Closed #25.

Date: Tue, 13 Sep 2016 13:03:15 -0500
From: Stan Preston <stazed10@gmail.com>
Subject: Re: Seq32 menu disabling

"why disabling is needed when playing"  ...

Date: Sun, 25 Sep 2016 12:32:25 -0700
From: layk <notifications@github.com>
Subject: Re: [ahlstromcj/sequencer64] Zooming sequencer edit window more than
        1:32 kills the program. (#28)

diff attached.
[diff.txt](https://github.com/ahlstromcj/sequencer64/files/491849/diff.txt)

Date: Sun, 25 Sep 2016 19:25:42 -0700
From: alejg <notifications@github.com>
Subject: [ahlstromcj/sequencer64] Cannot edit note length (#29)

When the note length is longer than the measure the editor behaves incorrectly,
not allowing to change the note off position.

![seq64](https://cloud.githubusercontent.com/assets/15330205/18820832/4973aac4-837
7-11e6-8a01-4ee1a11214bd.png)

Date: Sun, 25 Sep 2016 19:42:34 -0700
From: alejg <notifications@github.com>
Subject: [ahlstromcj/sequencer64] Unable to write the BPM (#30)

The BPM spin box shows that is allowed to write on it, but when try to enter
numbers, the pattern toggle shortcuts are triggered.

Date: Mon, 26 Sep 2016 09:51:57 -0700
From: alejg <notifications@github.com>
Subject: Re: [ahlstromcj/sequencer64] Unable to write the BPM (#30)

thanks! meanwhile you can simply make look as read only (grayed out), also a TAP
button feature (with it's corresponding keyboard shortcut) would be nice.

Date: Mon, 26 Sep 2016 13:19:53 -0700
From: F0rth <notifications@github.com>
Subject: Re: [ahlstromcj/sequencer64] [feature request] script language (#16)

For the records, an example of a bitwig script to add launchpad mini support
https://github.com/bitwig/novation-launchpad/
but OSC look far more appealing.

Date: Tue, 27 Sep 2016 06:21:01 -0700
From: alejg <notifications@github.com>
Subject: Re: [ahlstromcj/sequencer64] Cannot edit note length (#29)

Thanks!
I've tried and now it's working!.
A strange behaviour appears when I CTRL + Arrow left or right over a note,
an outline is being drawn and do not disappears until you do a click on the
background.

[This happens if another note is already selected, and that's where the action
 takes place.  Also, if ctrl-right-arrow is done on a note and it then extends
 it into the next note, then the note gets super long.  We should stop
 just before the next note.]

Date: Sat, 02 Oct 2016
From: Sebastien Mondet <notifications@github.com>

To reproduce:

create a track
edit it, add one note (with the "classical" editor")
then "Edit events"
select the "Note On"
"Modify Event"
Happened with seq64 compiled from master just now.

Date: Sun, 02 Oct 2016 17:24:28 -0700
From: Sebastien Mondet <notifications@github.com>
Subject: Re: [ahlstromcj/sequencer64] SegFault in Event Editor → "Modify Event"
        (#31)

Here it is:

 $ libtool --mode=execute gdb ./Sequencer64/sequencer64

Date: Mon, 03 Oct 2016 12:00:17 -0700
From: AndrewPy <notifications@github.com>
To: ahlstromcj/sequencer64 <sequencer64@noreply.github.com>
Subject: [ahlstromcj/sequencer64] Loop setting is ignored (#32)

When I create a song in the song editor and then activate loop playing, the left
and right marks are ignored.

(Sequencer64 0.9.18 2016-10-02 (Ubuntu 16.04 64bit))

Date: Mon, 03 Oct 2016 12:05:15 -0700
From: AndrewPy <notifications@github.com>
To: ahlstromcj/sequencer64 <sequencer64@noreply.github.com>
Subject: [ahlstromcj/sequencer64] Song cannot be edited any more after playing
        (#33)

When i play a song in the song editor and then try to edit the song while it is
playing and then stop the song, the song cannot be edited any more.

(Sequencer64 0.9.18 2016-10-02 (Ubuntu 16.04 64bit))

Date: Wed, 05 Oct 2016 09:04:57 -0700
From: y1ds <notifications@github.com>
Subject: [ahlstromcj/sequencer64] loops on/off with midi controller (#35)

I`m having problems turning on and off loops with a controller.
First i tried to use the config file that i used for seq24, and was working.
I realised that the "turn on" and "turn off" in the bindings in the rc file are
the other way around, also turning on did not work. I can only turn a loop off.
When i run sequencer64 in legacy mode, the on/off is not inverted anymore, but
still, only turning a loop off works.

Date: Wed, 05 Oct 2016 11:24:29 -0700
From: y1ds <notifications@github.com>
Subject: [ahlstromcj/sequencer64] stop playback and jack transport (#36)

I am not sure if this is a bug or not, but when jack transport is enabled and
sequencer64 is transport master, pressing the stop button doesn't go to the
beginning  of the loops.
also when it is not master, but another jack master is used, when
jack_transport_stop() is called, the loops do not return to the beginning.



Date: Fri, 07 Oct 2016 05:39:26 -0700
From: y1ds <notifications@github.com>
Subject: Re: [ahlstromcj/sequencer64] loops on/off with midi controller (#35)

I tried the fixup branch but im sorry to say, it got worse...  now also loops
are not turning off anymore.  also, when you quit seq64, all the midi bindings
from the sequencer64.rc file are removed... Haven`t really had any time to
look into it but I will try to help finding the problem.

PROVISIONALLY FIXED


Date: Wed, 05 Oct 2016
From: smondet
Subject: [feature request] Tempo Track? #34

I'd be nice to have a tempo-track in "song mode" (like many midi editors
have).

(Or how do people handle tempo variations in song-mode?)


Date: Sat, 08 Oct 2016
From: AndrewPy <notifications@github.com>
Subject: Strange behavior of the mute button in live mode #37

When playing is stopped, the mute button toggles the mute status of the
tracks. That's ok.

But while playing, the first press on the mute button mutes all tracks (and
activates the empty ones). And the next press on the mute button activates all
tracks (and mutes the empty ones).

Date: Sat, 08 Oct 2016 04:19:44 -0700
From: AndrewPy <notifications@github.com>
To: ahlstromcj/sequencer64 <sequencer64@noreply.github.com>
Cc: "C. Ahlstrom" <ahlstromcj@gmail.com>, Comment <comment@noreply.github.com>
Subject: Re: [ahlstromcj/sequencer64] Strange behavior of the mute button in live
        mode (#37)

Thank you, yes it would be clearer if it is the same as when the playing is
stopped. At least the previous state should be restored in the case of un-mute.

As it is now, one also can not recognize (in "play mode") whether it is muted or
not .



Date: Sat, 08 Oct 2016
From: AndrewPy <notifications@github.com>
Subject: No "play cursor" in empty piano roll #39

No "play cursor" is displayed in the piano roll of an empty track, but it
would be very useful for recording. (The cursor is visible after the first
note has been recorded.)

(ALSO SEE his 09 Oct 2016 below)


Date: Sat, 08 Oct 2016
From: AndrewPy <notifications@github.com>
Subject: Small quirks in event editor #38

No big deal, but in the edit fields of the event editor I see no cursor.

And in a list with many events, a different event is selected each time when I
use the scroll bar.

(Sequencer64 0.9.18.1 2016-10-05, Xubuntu 16.04, xfce 4.12)


ate: Sun, 09 Oct 2016 09:56:05 -0700
From: AndrewPy <notifications@github.com>
To: ahlstromcj/sequencer64 <sequencer64@noreply.github.com>
Subject: [ahlstromcj/sequencer64] Sometimes "play cursor" shows wrong position in
        main window (#41)

I am not sure whether this is a bug or a system-conditioned "feature" but it is at
least somewhat confusing when playing songs.

If you have a sequence with 2 or more measures and start it at an "odd" measure in
the song editor,  the "play cursor" in the main window (and in the piano roll, but
only for the first measure(?)) shows the wrong position for this sequence.

Steps to reproduce:

* Create a sequence with 2 measures and enter some notes

* Now create a Song and set the start for this sequence not at the first bar but
at the 2nd (or 4th and so on) bar.

* Play the song

* Now look at the "play cursor" for this sequence in the main window. It shows the
position as if the sequence would start at the first bar of the song.




Date: Mon, 10 Oct 2016 15:48:04 -0700
From: layk <notifications@github.com>
Subject: [ahlstromcj/sequencer64] recording midi note is fixed length due to
        missing handling of is_pattern_playing(bool) in perform.cpp (#42)

Hi
Trying to record midi notes all notes are recorded in fixed length due to
is_pattern_playing() is always false in sequence::stream_event (event & ev) in
perform.cpp line 2841 thus going to step-edit feature in that same function.

As a side note setting this boolean value was done in mainwind.cpp in seq24 0.9.3

To me the most logical place to set the flag seems to be for given functionality
(toggle between live record and step-edit) in perform::playback_key_event (const
keystroke & k, bool songmode) in perform.cpp since all possibilities are in that
function (pause/play/stop). I added is_pattern_playing(bool); for all the
possibilities.

With this attached patch is_pattern_playing is set and note length is now
recorded.

BTW There was one declaration in perform.cpp line 2048 with a comment 'Hmmmmm'.
    is_pattern_playing(false);              // hmmmmmmmmmmmmmmmmmm

I'm using fixups with --enable-debug --disable-shared --enable-seq32jack

Patch attached below.

[diff_fix.txt](https://github.com/ahlstromcj/sequencer64/files/520552/diff_fix.txt
)





Date: Mon, 10 Oct 2016 23:48:45 -0700
From: layk <notifications@github.com>
Subject: [ahlstromcj/sequencer64] Upper case midi file extension filtering when
        opening file (#43)

Hi

I downloaded some midi files the other day with uppercase midi file
extensions(*.MID) and did sot see those when opening in sequencer64 with default
filter 'MIDI Files' but only with 'Any Files'.

I added upper case filters in mainwnd.cpp mainwnd::choose_file () function.

Patch attached
[diff.txt](https://github.com/ahlstromcj/sequencer64/files/521098/diff.txt)





Date: Mon, 17 Oct 2016 16:25:20 -0700
From: layk <notifications@github.com>
To: ahlstromcj/sequencer64 <sequencer64@noreply.github.com>
Subject: [ahlstromcj/sequencer64] Undo(ctrl-z) removes two instanses of history
        via seqedit::on_key_press_event (GdkEventKey * ev) (#46)

Hi
Undoing(ctrl-z) removes two instances of history.To reproduce this if one makes
three notes one at a time and presses ctrl-z once only the first one remains. Same
goes for moving notes.

This is due to a else-if statement in seqedit.cpp line 2544 where
m_seqroll_wid->on_key_press_event(ev) calls seqroll::on_key_press_event making
first removal. This if statement is never true and seqroll::on_key_press_event is
called again on line result = Gtk::Window::on_key_press_event making another
m_seq.pop_undo(); in seqroll.cpp.

There was also a friend class definition in seqroll.hpp stating:

    /**
     *  For accessing on_key_press_event().  It would be good to be able to
     *  avoid this access!
     */
    friend class seqedit;

I'm not quite sure what was the notion here with friend class and all but changing
this else-if to if (ev->keyval == 'z') seems to work for me in sequence editor. It
also seems to me that regarding this undo problem there is no need for friend
class declaration anymore.

Patch attached for testing and thoughts.
[diff.txt](https://github.com/ahlstromcj/sequencer64/files/534872/diff.txt)




# vim: sw=4 ts=4 wm=4 et ft=rc
