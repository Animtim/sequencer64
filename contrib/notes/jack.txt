Notes About JACK
Chris Ahlstrom
2016-01-14 to 2016-02-13

Also be sure to read through the source code, especially the jack_assistant
module.  The following is a note about seq24:

   https://community.ardour.org/node/3165

    Ardour-Setup:

    * Positional Sync Source = JACK
    * Time Master = ON/Green

    seq24-Setup:

    * File -> Options -> Jack Sync
    * checked Jack Transport & Song Mode, then hit CONNECT and then OK

    By doing that i "enslaved" seq24 with Ardour, and can control it via
    Ardour-Transport-Buttons ;)

    . . .

    What I had to do is set seq24 options like this:

    Enable Jack Transport
    Enable Transport Master
    Enable Master Conditional
    Enable Song Mode

    Then hit connect after firing and setting up ardour the way you did
    above.

    Master Conditional will make it be Master only if no other JACK
    Transport application is running at the moment. For me that worked well,
    used to be offbeat also.

However, for Sequencer64, only one of the three needs to be set

    Enable Jack Transport (selects slave mode)
    Enable Transport Master
    Enable Master Conditional

We still have some work to do to improve our JACK handling.  In addition,
the JACK reference manual recommends handling JackBBTFrameOffset as well,
but does not really say enough about it.  Information on this topic is
very difficult to find elsewhere, and it seems that not a lot of MIDI
projects use it.  So we are experimenting with that.  See the
jack_testing.txt file.

Now, Hydrogen as JACK Master handles the situation where we tell QJackCtl
to stop, then rewind, then continue.  Hydrogen gives back the information
needed to tell QJackCtl where the transport is in terms of BBT.
Sequencer64 and Seq24 do not.  So let us analyze Hydrogen.

First, Hydrogen sets a timebase callback (as JACK Master) and a process
callback.  We think the former is the key.

Hydrogen maintains a value call bbt_frame_offset:

    void JackOutput::calculateFrameOffset()
    {
        bbt_frame_offset = m_JackTransportPos.frame - m_transport.m_nFrames;
    }

When the last two values are set equal, bbt_frame_offset is 0, and
indicates to stop re-syncing in every cycled when stopped.

In the timebase callback:
   
    unsigned long PlayTick = ( pos->frame - me->bbt_frame_offset ) /
        me->m_transport.m_nTickSize;

    pos->bar = H->getPosForTick ( PlayTick );

Duhhhh....

# vim: sw=4 ts=4 wm=8 et ft=sh
