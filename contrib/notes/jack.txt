Notes About JACK and RtMidi
Chris Ahlstrom
2016-01-14 to 2017-01-15

Also be sure to read through the source code, especially the jack_assistant
module.  The following is a note about seq24:

   https://community.ardour.org/node/3165

    Ardour-Setup:

    * Positional Sync Source = JACK
    * Time Master = ON/Green

    seq24-Setup:

    * File -> Options -> Jack Sync
    * checked Jack Transport & Song Mode, then hit CONNECT and then OK

    By doing that i "enslaved" seq24 with Ardour, and can control it via
    Ardour-Transport-Buttons ;)

    . . .

    What I had to do is set seq24 options like this:

    Enable Jack Transport
    Enable Transport Master
    Enable Master Conditional
    Enable Song Mode

    Then hit connect after firing and setting up ardour the way you did
    above.

    Master Conditional will make it be Master only if no other JACK
    Transport application is running at the moment. For me that worked well,
    used to be offbeat also.

However, for Sequencer64, only one of the three needs to be set

    Enable Jack Transport (selects slave mode)
    Enable Transport Master
    Enable Master Conditional

We still have some work to do to improve our JACK handling.  In addition,
the JACK reference manual recommends handling JackBBTFrameOffset as well,
but does not really say enough about it.  Information on this topic is
very difficult to find elsewhere, and it seems that not a lot of MIDI
projects use it.  So we are experimenting with that.  See the
jack_testing.txt file.

Now, Hydrogen as JACK Master handles the situation where we tell QJackCtl
to stop, then rewind, then continue.  Hydrogen gives back the information
needed to tell QJackCtl where the transport is in terms of BBT.
Sequencer64 and Seq24 do not.  So let us analyze Hydrogen.

First, Hydrogen sets a timebase callback (as JACK Master) and a process
callback.  We think the former is the key.

Hydrogen maintains a value call bbt_frame_offset:

    void JackOutput::calculateFrameOffset()
    {
        bbt_frame_offset = m_JackTransportPos.frame - m_transport.m_nFrames;
    }

When the last two values are set equal, bbt_frame_offset is 0, and
indicates to stop re-syncing in every cycled when stopped.

In the timebase callback:
   
    unsigned long PlayTick = ( pos->frame - me->bbt_frame_offset ) /
        me->m_transport.m_nTickSize;

    pos->bar = H->getPosForTick ( PlayTick );

Duhhhh....

RtMidi JACK:

    Here, we summarize how RtMidi sets up and connects JACK ports.  First,
    what the constructor does, via a number of member functions not named
    here.

    1.  If it is an input port, allocate a midi-queue structure.  Also,
        in test code, add a midi-message.
    2.  Allocate a new midi-data structure to act as a scratchpad for the
        port.
    3.  Call jack_client_open() with the desired client name.  This is
        something like "RtMidi Input Client".
    4.  Call jack_set_process_callback() with the JACK client pointer,
        the desired process-input callback, currently the stock callback
        provided with RtMidi.
    5.  Call jack_activate() with the JACK client pointer.
    6.  Call getPortCount().  This calls:
        1.  Call connect() again, which does nothing because already
            connected.
        2.  Call jack_get_ports() to get a listing of the ports.  This
            yields an array of string pointers such as "qmidiarp:out 1"
            and "qmidiarp:out 2".
    7.  Now call openPort() [here, MidiInJack::openPort()] with the
        desired port number re 0 and the desired port name, such as
        "RtMidi Input".
        1.  Call connect() again, which does nothing because already
            connected.
        2.  Call jack_port_register() with the JACK client pointer, the
            port name ("RtMidi Input"), and the JackPortIsInput flag.
            Take note that this flag means we are a local input port
            representing a connection to a remote output port.
            If we are setting up a local output port, then we would register
            with a JackPortIsOutput, to connect to s remote input port.
        3.  Call getPortName(portnumber = 0), which again uselessly calls
            connect(), then calls jack_get_ports() with the JACK client
            pointer.  Since we are setting up a local input port, we want
            to find the names of output ports, that is, ports with the
            JackPortIsOutput flag.  If we are setting up a MidiInJack
            port, we get the list of "JackPortIsOutput" ports from the
            system.  This gets us strings like "qmidiarp:out 1" and
            "qmidiarp:out 2", and we pick one via the port number.  If we
            are setting up a MidiOutJack port, we get the list of
            "JackPortIsIntput" ports from the system.  This gets us
            strings like "qmidiarp:in 1" and "qmidiarp:in 2", and we pick
            one via the port number.
        4.  Finally, call jack_connect() with the JACK client pointer,
            the name of the source port ("qmidiarp:out 1") which has
            (and must have) the flag JackPortIsOutput, and the name of the
            (local) destination port, which is obtained by

                jack_port_name(data->port)  // pointer to local port

            and is, here, "RtMidi Input Client:RtMidi Input", and has the
            flag JackPortIsInput.  In qjackctl, one sees that the "out 1"
            port of "qmidiarp" is connected to the "RtMidi input" port of
            "RtMidi Input Client".
        5.  Then set the input callback function, which has the function
            signature "void (double ts, vector<char> message, void * userdata)".
        6.  Call ignoreTypes() as desired.

    The take-away from this is that an RtMidi input port is one that is
    meant to connect to a JACK output port set up by another application or
    piece of MIDI hardware.  The local port is JackPortIsInput, and the
    remote port is JackPortIsOutput.

    In our case, we will create local ports in one-to-one correspondence with
    remote ports.

Normal general use case:

    1.  Open a connection to the JACK client server with
        jack_client_open().
    2.  Examine the status and bail out if needed.
    3.  Install a handler to manage I/O with jack_set_process_callback().
    4.  Install a shutdown handler with jack_on_shutdown().  **********
    5.  Register the ports with jack_port_register().
    6.  Activate the ports with jack_activate().
    7.  Connect the ports to the pipeline with jack_connect().
    8.  Sit there and wait for stuff to happen (e.g. stay in the GUI).

# vim: sw=4 ts=4 wm=8 et ft=sh
