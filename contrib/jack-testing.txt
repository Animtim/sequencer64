Testing JACK in Sequencer64
Chris Ahlstrom
2016-01-16 to 2016-01-17

These tests are done with qjackctl already running.  They currently show
some issues.

[jack-transport] == 1, the rest of the jack-* settings == 0.

    Start the transport.
    Run Sequencer64.  This appears in the console:

        [JACK transport slave]
        jack sync(): zero frame rate [single report]!?
        [JackTransportStopped]
    
    Load a MIDI file.
    Every time Space is hit in the main window:

        Console window:

            [JackTransportStarting]
            [Start playback]

        QJackCtl:

            Jack time counter resets to 0.

    Fixed, was setting jack-running flag to false, wrongly:

        Start again, hit Space, observe same.  Now hit Esc.  No output.
        Hit Space again, it starts playing.
        Esc, Space do start, stop, while qjackctl is stopped.

        Even if qjacktrl starts and stops, Sequencer64 now behaves
        independently of qjackctl.

    Seq64 BPM value affects its playback speed.  

    The main window Stop and Start buttons behave the same.

    At exit, we also "[Cannot release JACK timebase]", probably shouldn't
    be doing that.

    Actions:

        mainwnd -> perform::start_playing(flag = rc().jack_start_mode)
            perform::position_jack(flag)
                jack_assistant::position(flag)
                    if (m_jack_running) jack_transport_locate()

                    TODO: We think we may not want to change the transport
                    position unless we are the JACK Master.  We have added
                    a relocate parameter.

                    TODO: Why doesn't the jack transport make seq24
                    progress??????????????

            perform::start_jack()
                jack_assistant::start()
                    jack_transport_start()
            perform::start(flag)
                if (! jack...is_running()) inner_start(flag)
                    perform::set_playback_mode(flag)
                    if (flag)
                        perform::off_sequences()
                            Turns off all the seqs set_playing flags!

            if flag is false, the order of start_jack() and start() is
            reversed.  Why?

        mainwnd -> perform::stop_playing()
            perform::stop_jack()
                jack_assistant::stop()
            perform::stop()
                if (! jack...is_running()) inner_start()
                    reset sequences and flush the buss.


As Jack Slave, how did this happen:

% ./Sequencer64/sequencer64 
[Reading user configuration /home/ahlstrom/.config/sequencer64/sequencer64.usr]
[Reading rc configuration /home/ahlstrom/.config/sequencer64/sequencer64.rc]
mastermidibus::port_start(): m_buses_out[6] not null
mmbus::port_start(): m_buses_in[1] not null
mastermidibus::port_start(): m_buses_out[6] not null
mmbus::port_start(): m_buses_in[1] not null
mastermidibus::port_start(): m_buses_out[6] not null
mmbus::port_start(): m_buses_in[1] not null
[Writing rc configuration /home/ahlstrom/.config/sequencer64/sequencer64.rc]

http://shangrislinuxmusic.blogspot.com/2008/08/writing-and-recording-song-using-seq24.html

Start Qjackctl with

qjackctl &

You can then click on the Start button to start jackd. Your linux station
is now set up to play music.

Install Zynaddsubfx, Seq24 and Hydrogen 

seq24 --manual_alsa_ports & zynaddsubfx -r 48000 -b 128 & hydrogen -d jack
&

Click on the "Connect" button of QJackctl. Check on the "Audio" tab that
Zynaddsubfx and Hydrogen outputs are connected to ALSA's PCM input.

On the ALSA tab, connect Seq24 first output to Zynaddsubfx's input, and
connect Seq24 second output to Hydrogen's input.

Select an instrument in Zynaddsubfx in the Instrument>Show Instrument Bank
menu. Then set the MIDI channel of Zynaddsubfx to 2 (It currently shows
"1"). Select another instrument for the second midi channel. Repeat the
operation for a third instrument.

Right-click in Seq24's grid and choose new. You will get a sequence
edition window. You can adjust the length of the sequence, which is by
default 1 bar. Let's tell Seq24 we want to play on the Hydrogen rhythmbox :
In the Output Bus menu left to the field that shows "[1] seq24 1" and set
it to "[2] seq24 2". Remember we connected Seq24's second midi output to
Hydrogen.

There's three MIDI buttons in the down left corner of the window. Click on
the first one to tell Seq24 to send midi events to Hydrogen. You can now
edit your pattern by holding right-mouse's button and left-clicking to
paste notes. You can adjust their length with the field next to the
sequence length. You can click on the piano keyboard to ear how each note
sounds. Hydrogen set's runs from C2 to D#3. Press "Play" to listen to your
sequence.

Once you have a Drum sequence, you can repeat theses steps to add our
three Zynaddsufx's instruments. Just select the first Output Bus for the
sequence (we connected the first seq24 output to Zynaddsubfx already). To
select one of the three Zynaddsubfx instruments, click on the button
showing a MIDI plug next to the Output Bus field and select one from 1 to
3.

Once you have some sequences, you can use them to compose the song : on
the main Seq24 windows, there's a 'Song Edition' button in the right down
corner. Click on it. In the new window, you can click the same way that in
the sequence windows to draw song sequences. Click on "Play" to play your
song.

https://help.ubuntu.com/community/HowToSeq24Introduction

http://sourceforge.net/p/seq24/mailman/message/1049880/

I use this setup:

                          +---------------+
                          |    ARDOUR     |
                          |               |
Seq24 --> QSynth -----------> Audio 1     |
  |                       |               |
  +-----> ZynAddSubFx ------> Audio 2     |
  |                       |               |
  +-----> Hydrogen ---------> Audio 3     |
                          |               |
                          +---------------+

And works fine for me. As Seq24 generates all the midi events, there are 
no sync problems.




# vim: sw=4 ts=4 wm=8 et ft=c
